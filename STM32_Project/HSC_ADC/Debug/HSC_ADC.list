
HSC_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001f50  08001f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd0  08001fd0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd0  08001fd0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd0  08001fd0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D1       0000000c  2000000c  08001fe4  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000130  20000018  08001ff0  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  08001ff0  00020148  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e24b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a7  00000000  00000000  0002e28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000c2c2  00000000  00000000  00030332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000780  00000000  00000000  0003c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001808  00000000  00000000  0003cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db3f  00000000  00000000  0003e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003612  00000000  00000000  0004c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0004f6d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001750  00000000  00000000  0004f724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f38 	.word	0x08001f38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08001f38 	.word	0x08001f38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e05      	subs	r5, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 fb79 	bl	800091c <__clzsi2>
 800022a:	239e      	movs	r3, #158	; 0x9e
 800022c:	0004      	movs	r4, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	; 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	dd01      	ble.n	800023c <__aeabi_ui2f+0x1c>
 8000238:	3c08      	subs	r4, #8
 800023a:	40a5      	lsls	r5, r4
 800023c:	026d      	lsls	r5, r5, #9
 800023e:	0a6d      	lsrs	r5, r5, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2500      	movs	r5, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4328      	orrs	r0, r5
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	; 0x99
 8000250:	dd09      	ble.n	8000266 <__aeabi_ui2f+0x46>
 8000252:	0002      	movs	r2, r0
 8000254:	0029      	movs	r1, r5
 8000256:	321b      	adds	r2, #27
 8000258:	4091      	lsls	r1, r2
 800025a:	1e4a      	subs	r2, r1, #1
 800025c:	4191      	sbcs	r1, r2
 800025e:	2205      	movs	r2, #5
 8000260:	1a12      	subs	r2, r2, r0
 8000262:	40d5      	lsrs	r5, r2
 8000264:	430d      	orrs	r5, r1
 8000266:	2c05      	cmp	r4, #5
 8000268:	dc12      	bgt.n	8000290 <__aeabi_ui2f+0x70>
 800026a:	0029      	movs	r1, r5
 800026c:	4e0c      	ldr	r6, [pc, #48]	; (80002a0 <__aeabi_ui2f+0x80>)
 800026e:	4031      	ands	r1, r6
 8000270:	076a      	lsls	r2, r5, #29
 8000272:	d009      	beq.n	8000288 <__aeabi_ui2f+0x68>
 8000274:	200f      	movs	r0, #15
 8000276:	4028      	ands	r0, r5
 8000278:	2804      	cmp	r0, #4
 800027a:	d005      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800027c:	3104      	adds	r1, #4
 800027e:	014a      	lsls	r2, r1, #5
 8000280:	d502      	bpl.n	8000288 <__aeabi_ui2f+0x68>
 8000282:	239f      	movs	r3, #159	; 0x9f
 8000284:	4031      	ands	r1, r6
 8000286:	1b1b      	subs	r3, r3, r4
 8000288:	0189      	lsls	r1, r1, #6
 800028a:	0a4d      	lsrs	r5, r1, #9
 800028c:	b2d8      	uxtb	r0, r3
 800028e:	e7db      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000290:	1f62      	subs	r2, r4, #5
 8000292:	4095      	lsls	r5, r2
 8000294:	0029      	movs	r1, r5
 8000296:	4e02      	ldr	r6, [pc, #8]	; (80002a0 <__aeabi_ui2f+0x80>)
 8000298:	4031      	ands	r1, r6
 800029a:	076a      	lsls	r2, r5, #29
 800029c:	d0f4      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800029e:	e7e9      	b.n	8000274 <__aeabi_ui2f+0x54>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__aeabi_dmul>:
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	4657      	mov	r7, sl
 80002a8:	464e      	mov	r6, r9
 80002aa:	4645      	mov	r5, r8
 80002ac:	46de      	mov	lr, fp
 80002ae:	b5e0      	push	{r5, r6, r7, lr}
 80002b0:	4698      	mov	r8, r3
 80002b2:	030c      	lsls	r4, r1, #12
 80002b4:	004b      	lsls	r3, r1, #1
 80002b6:	0006      	movs	r6, r0
 80002b8:	4692      	mov	sl, r2
 80002ba:	b087      	sub	sp, #28
 80002bc:	0b24      	lsrs	r4, r4, #12
 80002be:	0d5b      	lsrs	r3, r3, #21
 80002c0:	0fcf      	lsrs	r7, r1, #31
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d100      	bne.n	80002c8 <__aeabi_dmul+0x24>
 80002c6:	e15c      	b.n	8000582 <__aeabi_dmul+0x2de>
 80002c8:	4ad9      	ldr	r2, [pc, #868]	; (8000630 <__aeabi_dmul+0x38c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d100      	bne.n	80002d0 <__aeabi_dmul+0x2c>
 80002ce:	e175      	b.n	80005bc <__aeabi_dmul+0x318>
 80002d0:	0f42      	lsrs	r2, r0, #29
 80002d2:	00e4      	lsls	r4, r4, #3
 80002d4:	4314      	orrs	r4, r2
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0412      	lsls	r2, r2, #16
 80002da:	4314      	orrs	r4, r2
 80002dc:	4ad5      	ldr	r2, [pc, #852]	; (8000634 <__aeabi_dmul+0x390>)
 80002de:	00c5      	lsls	r5, r0, #3
 80002e0:	4694      	mov	ip, r2
 80002e2:	4463      	add	r3, ip
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2300      	movs	r3, #0
 80002e8:	4699      	mov	r9, r3
 80002ea:	469b      	mov	fp, r3
 80002ec:	4643      	mov	r3, r8
 80002ee:	4642      	mov	r2, r8
 80002f0:	031e      	lsls	r6, r3, #12
 80002f2:	0fd2      	lsrs	r2, r2, #31
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	4650      	mov	r0, sl
 80002f8:	4690      	mov	r8, r2
 80002fa:	0b36      	lsrs	r6, r6, #12
 80002fc:	0d5b      	lsrs	r3, r3, #21
 80002fe:	d100      	bne.n	8000302 <__aeabi_dmul+0x5e>
 8000300:	e120      	b.n	8000544 <__aeabi_dmul+0x2a0>
 8000302:	4acb      	ldr	r2, [pc, #812]	; (8000630 <__aeabi_dmul+0x38c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d100      	bne.n	800030a <__aeabi_dmul+0x66>
 8000308:	e162      	b.n	80005d0 <__aeabi_dmul+0x32c>
 800030a:	49ca      	ldr	r1, [pc, #808]	; (8000634 <__aeabi_dmul+0x390>)
 800030c:	0f42      	lsrs	r2, r0, #29
 800030e:	468c      	mov	ip, r1
 8000310:	9900      	ldr	r1, [sp, #0]
 8000312:	4463      	add	r3, ip
 8000314:	00f6      	lsls	r6, r6, #3
 8000316:	468c      	mov	ip, r1
 8000318:	4316      	orrs	r6, r2
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	449c      	add	ip, r3
 800031e:	0412      	lsls	r2, r2, #16
 8000320:	4663      	mov	r3, ip
 8000322:	4316      	orrs	r6, r2
 8000324:	00c2      	lsls	r2, r0, #3
 8000326:	2000      	movs	r0, #0
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	9900      	ldr	r1, [sp, #0]
 800032c:	4643      	mov	r3, r8
 800032e:	3101      	adds	r1, #1
 8000330:	468c      	mov	ip, r1
 8000332:	4649      	mov	r1, r9
 8000334:	407b      	eors	r3, r7
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	290f      	cmp	r1, #15
 800033a:	d826      	bhi.n	800038a <__aeabi_dmul+0xe6>
 800033c:	4bbe      	ldr	r3, [pc, #760]	; (8000638 <__aeabi_dmul+0x394>)
 800033e:	0089      	lsls	r1, r1, #2
 8000340:	5859      	ldr	r1, [r3, r1]
 8000342:	468f      	mov	pc, r1
 8000344:	4643      	mov	r3, r8
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	0034      	movs	r4, r6
 800034a:	0015      	movs	r5, r2
 800034c:	4683      	mov	fp, r0
 800034e:	465b      	mov	r3, fp
 8000350:	2b02      	cmp	r3, #2
 8000352:	d016      	beq.n	8000382 <__aeabi_dmul+0xde>
 8000354:	2b03      	cmp	r3, #3
 8000356:	d100      	bne.n	800035a <__aeabi_dmul+0xb6>
 8000358:	e203      	b.n	8000762 <__aeabi_dmul+0x4be>
 800035a:	2b01      	cmp	r3, #1
 800035c:	d000      	beq.n	8000360 <__aeabi_dmul+0xbc>
 800035e:	e0cd      	b.n	80004fc <__aeabi_dmul+0x258>
 8000360:	2200      	movs	r2, #0
 8000362:	2400      	movs	r4, #0
 8000364:	2500      	movs	r5, #0
 8000366:	9b01      	ldr	r3, [sp, #4]
 8000368:	0512      	lsls	r2, r2, #20
 800036a:	4322      	orrs	r2, r4
 800036c:	07db      	lsls	r3, r3, #31
 800036e:	431a      	orrs	r2, r3
 8000370:	0028      	movs	r0, r5
 8000372:	0011      	movs	r1, r2
 8000374:	b007      	add	sp, #28
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	46bb      	mov	fp, r7
 800037a:	46b2      	mov	sl, r6
 800037c:	46a9      	mov	r9, r5
 800037e:	46a0      	mov	r8, r4
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	2400      	movs	r4, #0
 8000384:	2500      	movs	r5, #0
 8000386:	4aaa      	ldr	r2, [pc, #680]	; (8000630 <__aeabi_dmul+0x38c>)
 8000388:	e7ed      	b.n	8000366 <__aeabi_dmul+0xc2>
 800038a:	0c28      	lsrs	r0, r5, #16
 800038c:	042d      	lsls	r5, r5, #16
 800038e:	0c2d      	lsrs	r5, r5, #16
 8000390:	002b      	movs	r3, r5
 8000392:	0c11      	lsrs	r1, r2, #16
 8000394:	0412      	lsls	r2, r2, #16
 8000396:	0c12      	lsrs	r2, r2, #16
 8000398:	4353      	muls	r3, r2
 800039a:	4698      	mov	r8, r3
 800039c:	0013      	movs	r3, r2
 800039e:	002f      	movs	r7, r5
 80003a0:	4343      	muls	r3, r0
 80003a2:	4699      	mov	r9, r3
 80003a4:	434f      	muls	r7, r1
 80003a6:	444f      	add	r7, r9
 80003a8:	46bb      	mov	fp, r7
 80003aa:	4647      	mov	r7, r8
 80003ac:	000b      	movs	r3, r1
 80003ae:	0c3f      	lsrs	r7, r7, #16
 80003b0:	46ba      	mov	sl, r7
 80003b2:	4343      	muls	r3, r0
 80003b4:	44da      	add	sl, fp
 80003b6:	9302      	str	r3, [sp, #8]
 80003b8:	45d1      	cmp	r9, sl
 80003ba:	d904      	bls.n	80003c6 <__aeabi_dmul+0x122>
 80003bc:	2780      	movs	r7, #128	; 0x80
 80003be:	027f      	lsls	r7, r7, #9
 80003c0:	46b9      	mov	r9, r7
 80003c2:	444b      	add	r3, r9
 80003c4:	9302      	str	r3, [sp, #8]
 80003c6:	4653      	mov	r3, sl
 80003c8:	0c1b      	lsrs	r3, r3, #16
 80003ca:	469b      	mov	fp, r3
 80003cc:	4653      	mov	r3, sl
 80003ce:	041f      	lsls	r7, r3, #16
 80003d0:	4643      	mov	r3, r8
 80003d2:	041b      	lsls	r3, r3, #16
 80003d4:	0c1b      	lsrs	r3, r3, #16
 80003d6:	4698      	mov	r8, r3
 80003d8:	003b      	movs	r3, r7
 80003da:	4443      	add	r3, r8
 80003dc:	9304      	str	r3, [sp, #16]
 80003de:	0c33      	lsrs	r3, r6, #16
 80003e0:	0436      	lsls	r6, r6, #16
 80003e2:	0c36      	lsrs	r6, r6, #16
 80003e4:	4698      	mov	r8, r3
 80003e6:	0033      	movs	r3, r6
 80003e8:	4343      	muls	r3, r0
 80003ea:	4699      	mov	r9, r3
 80003ec:	4643      	mov	r3, r8
 80003ee:	4343      	muls	r3, r0
 80003f0:	002f      	movs	r7, r5
 80003f2:	469a      	mov	sl, r3
 80003f4:	4643      	mov	r3, r8
 80003f6:	4377      	muls	r7, r6
 80003f8:	435d      	muls	r5, r3
 80003fa:	0c38      	lsrs	r0, r7, #16
 80003fc:	444d      	add	r5, r9
 80003fe:	1945      	adds	r5, r0, r5
 8000400:	45a9      	cmp	r9, r5
 8000402:	d903      	bls.n	800040c <__aeabi_dmul+0x168>
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	025b      	lsls	r3, r3, #9
 8000408:	4699      	mov	r9, r3
 800040a:	44ca      	add	sl, r9
 800040c:	043f      	lsls	r7, r7, #16
 800040e:	0c28      	lsrs	r0, r5, #16
 8000410:	0c3f      	lsrs	r7, r7, #16
 8000412:	042d      	lsls	r5, r5, #16
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	0c27      	lsrs	r7, r4, #16
 8000418:	0424      	lsls	r4, r4, #16
 800041a:	0c24      	lsrs	r4, r4, #16
 800041c:	0003      	movs	r3, r0
 800041e:	0020      	movs	r0, r4
 8000420:	4350      	muls	r0, r2
 8000422:	437a      	muls	r2, r7
 8000424:	4691      	mov	r9, r2
 8000426:	003a      	movs	r2, r7
 8000428:	4453      	add	r3, sl
 800042a:	9305      	str	r3, [sp, #20]
 800042c:	0c03      	lsrs	r3, r0, #16
 800042e:	469a      	mov	sl, r3
 8000430:	434a      	muls	r2, r1
 8000432:	4361      	muls	r1, r4
 8000434:	4449      	add	r1, r9
 8000436:	4451      	add	r1, sl
 8000438:	44ab      	add	fp, r5
 800043a:	4589      	cmp	r9, r1
 800043c:	d903      	bls.n	8000446 <__aeabi_dmul+0x1a2>
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	025b      	lsls	r3, r3, #9
 8000442:	4699      	mov	r9, r3
 8000444:	444a      	add	r2, r9
 8000446:	0400      	lsls	r0, r0, #16
 8000448:	0c0b      	lsrs	r3, r1, #16
 800044a:	0c00      	lsrs	r0, r0, #16
 800044c:	0409      	lsls	r1, r1, #16
 800044e:	1809      	adds	r1, r1, r0
 8000450:	0020      	movs	r0, r4
 8000452:	4699      	mov	r9, r3
 8000454:	4643      	mov	r3, r8
 8000456:	4370      	muls	r0, r6
 8000458:	435c      	muls	r4, r3
 800045a:	437e      	muls	r6, r7
 800045c:	435f      	muls	r7, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	4698      	mov	r8, r3
 8000462:	19a4      	adds	r4, r4, r6
 8000464:	4444      	add	r4, r8
 8000466:	444a      	add	r2, r9
 8000468:	9703      	str	r7, [sp, #12]
 800046a:	42a6      	cmp	r6, r4
 800046c:	d904      	bls.n	8000478 <__aeabi_dmul+0x1d4>
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	025b      	lsls	r3, r3, #9
 8000472:	4698      	mov	r8, r3
 8000474:	4447      	add	r7, r8
 8000476:	9703      	str	r7, [sp, #12]
 8000478:	0423      	lsls	r3, r4, #16
 800047a:	9e02      	ldr	r6, [sp, #8]
 800047c:	469a      	mov	sl, r3
 800047e:	9b05      	ldr	r3, [sp, #20]
 8000480:	445e      	add	r6, fp
 8000482:	4698      	mov	r8, r3
 8000484:	42ae      	cmp	r6, r5
 8000486:	41ad      	sbcs	r5, r5
 8000488:	1876      	adds	r6, r6, r1
 800048a:	428e      	cmp	r6, r1
 800048c:	4189      	sbcs	r1, r1
 800048e:	0400      	lsls	r0, r0, #16
 8000490:	0c00      	lsrs	r0, r0, #16
 8000492:	4450      	add	r0, sl
 8000494:	4440      	add	r0, r8
 8000496:	426d      	negs	r5, r5
 8000498:	1947      	adds	r7, r0, r5
 800049a:	46b8      	mov	r8, r7
 800049c:	4693      	mov	fp, r2
 800049e:	4249      	negs	r1, r1
 80004a0:	4689      	mov	r9, r1
 80004a2:	44c3      	add	fp, r8
 80004a4:	44d9      	add	r9, fp
 80004a6:	4298      	cmp	r0, r3
 80004a8:	4180      	sbcs	r0, r0
 80004aa:	45a8      	cmp	r8, r5
 80004ac:	41ad      	sbcs	r5, r5
 80004ae:	4593      	cmp	fp, r2
 80004b0:	4192      	sbcs	r2, r2
 80004b2:	4589      	cmp	r9, r1
 80004b4:	4189      	sbcs	r1, r1
 80004b6:	426d      	negs	r5, r5
 80004b8:	4240      	negs	r0, r0
 80004ba:	4328      	orrs	r0, r5
 80004bc:	0c24      	lsrs	r4, r4, #16
 80004be:	4252      	negs	r2, r2
 80004c0:	4249      	negs	r1, r1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	9b03      	ldr	r3, [sp, #12]
 80004c6:	1900      	adds	r0, r0, r4
 80004c8:	1880      	adds	r0, r0, r2
 80004ca:	18c7      	adds	r7, r0, r3
 80004cc:	464b      	mov	r3, r9
 80004ce:	0ddc      	lsrs	r4, r3, #23
 80004d0:	9b04      	ldr	r3, [sp, #16]
 80004d2:	0275      	lsls	r5, r6, #9
 80004d4:	431d      	orrs	r5, r3
 80004d6:	1e6a      	subs	r2, r5, #1
 80004d8:	4195      	sbcs	r5, r2
 80004da:	464b      	mov	r3, r9
 80004dc:	0df6      	lsrs	r6, r6, #23
 80004de:	027f      	lsls	r7, r7, #9
 80004e0:	4335      	orrs	r5, r6
 80004e2:	025a      	lsls	r2, r3, #9
 80004e4:	433c      	orrs	r4, r7
 80004e6:	4315      	orrs	r5, r2
 80004e8:	01fb      	lsls	r3, r7, #7
 80004ea:	d400      	bmi.n	80004ee <__aeabi_dmul+0x24a>
 80004ec:	e11c      	b.n	8000728 <__aeabi_dmul+0x484>
 80004ee:	2101      	movs	r1, #1
 80004f0:	086a      	lsrs	r2, r5, #1
 80004f2:	400d      	ands	r5, r1
 80004f4:	4315      	orrs	r5, r2
 80004f6:	07e2      	lsls	r2, r4, #31
 80004f8:	4315      	orrs	r5, r2
 80004fa:	0864      	lsrs	r4, r4, #1
 80004fc:	494f      	ldr	r1, [pc, #316]	; (800063c <__aeabi_dmul+0x398>)
 80004fe:	4461      	add	r1, ip
 8000500:	2900      	cmp	r1, #0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_dmul+0x262>
 8000504:	e0b0      	b.n	8000668 <__aeabi_dmul+0x3c4>
 8000506:	076b      	lsls	r3, r5, #29
 8000508:	d009      	beq.n	800051e <__aeabi_dmul+0x27a>
 800050a:	220f      	movs	r2, #15
 800050c:	402a      	ands	r2, r5
 800050e:	2a04      	cmp	r2, #4
 8000510:	d005      	beq.n	800051e <__aeabi_dmul+0x27a>
 8000512:	1d2a      	adds	r2, r5, #4
 8000514:	42aa      	cmp	r2, r5
 8000516:	41ad      	sbcs	r5, r5
 8000518:	426d      	negs	r5, r5
 800051a:	1964      	adds	r4, r4, r5
 800051c:	0015      	movs	r5, r2
 800051e:	01e3      	lsls	r3, r4, #7
 8000520:	d504      	bpl.n	800052c <__aeabi_dmul+0x288>
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4a46      	ldr	r2, [pc, #280]	; (8000640 <__aeabi_dmul+0x39c>)
 8000526:	00c9      	lsls	r1, r1, #3
 8000528:	4014      	ands	r4, r2
 800052a:	4461      	add	r1, ip
 800052c:	4a45      	ldr	r2, [pc, #276]	; (8000644 <__aeabi_dmul+0x3a0>)
 800052e:	4291      	cmp	r1, r2
 8000530:	dd00      	ble.n	8000534 <__aeabi_dmul+0x290>
 8000532:	e726      	b.n	8000382 <__aeabi_dmul+0xde>
 8000534:	0762      	lsls	r2, r4, #29
 8000536:	08ed      	lsrs	r5, r5, #3
 8000538:	0264      	lsls	r4, r4, #9
 800053a:	0549      	lsls	r1, r1, #21
 800053c:	4315      	orrs	r5, r2
 800053e:	0b24      	lsrs	r4, r4, #12
 8000540:	0d4a      	lsrs	r2, r1, #21
 8000542:	e710      	b.n	8000366 <__aeabi_dmul+0xc2>
 8000544:	4652      	mov	r2, sl
 8000546:	4332      	orrs	r2, r6
 8000548:	d100      	bne.n	800054c <__aeabi_dmul+0x2a8>
 800054a:	e07f      	b.n	800064c <__aeabi_dmul+0x3a8>
 800054c:	2e00      	cmp	r6, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dmul+0x2ae>
 8000550:	e0dc      	b.n	800070c <__aeabi_dmul+0x468>
 8000552:	0030      	movs	r0, r6
 8000554:	f000 f9e2 	bl	800091c <__clzsi2>
 8000558:	0002      	movs	r2, r0
 800055a:	3a0b      	subs	r2, #11
 800055c:	231d      	movs	r3, #29
 800055e:	0001      	movs	r1, r0
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	4652      	mov	r2, sl
 8000564:	3908      	subs	r1, #8
 8000566:	40da      	lsrs	r2, r3
 8000568:	408e      	lsls	r6, r1
 800056a:	4316      	orrs	r6, r2
 800056c:	4652      	mov	r2, sl
 800056e:	408a      	lsls	r2, r1
 8000570:	9b00      	ldr	r3, [sp, #0]
 8000572:	4935      	ldr	r1, [pc, #212]	; (8000648 <__aeabi_dmul+0x3a4>)
 8000574:	1a18      	subs	r0, r3, r0
 8000576:	0003      	movs	r3, r0
 8000578:	468c      	mov	ip, r1
 800057a:	4463      	add	r3, ip
 800057c:	2000      	movs	r0, #0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	e6d3      	b.n	800032a <__aeabi_dmul+0x86>
 8000582:	0025      	movs	r5, r4
 8000584:	4305      	orrs	r5, r0
 8000586:	d04a      	beq.n	800061e <__aeabi_dmul+0x37a>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x2ea>
 800058c:	e0b0      	b.n	80006f0 <__aeabi_dmul+0x44c>
 800058e:	0020      	movs	r0, r4
 8000590:	f000 f9c4 	bl	800091c <__clzsi2>
 8000594:	0001      	movs	r1, r0
 8000596:	0002      	movs	r2, r0
 8000598:	390b      	subs	r1, #11
 800059a:	231d      	movs	r3, #29
 800059c:	0010      	movs	r0, r2
 800059e:	1a5b      	subs	r3, r3, r1
 80005a0:	0031      	movs	r1, r6
 80005a2:	0035      	movs	r5, r6
 80005a4:	3808      	subs	r0, #8
 80005a6:	4084      	lsls	r4, r0
 80005a8:	40d9      	lsrs	r1, r3
 80005aa:	4085      	lsls	r5, r0
 80005ac:	430c      	orrs	r4, r1
 80005ae:	4826      	ldr	r0, [pc, #152]	; (8000648 <__aeabi_dmul+0x3a4>)
 80005b0:	1a83      	subs	r3, r0, r2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	4699      	mov	r9, r3
 80005b8:	469b      	mov	fp, r3
 80005ba:	e697      	b.n	80002ec <__aeabi_dmul+0x48>
 80005bc:	0005      	movs	r5, r0
 80005be:	4325      	orrs	r5, r4
 80005c0:	d126      	bne.n	8000610 <__aeabi_dmul+0x36c>
 80005c2:	2208      	movs	r2, #8
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2400      	movs	r4, #0
 80005ca:	4691      	mov	r9, r2
 80005cc:	469b      	mov	fp, r3
 80005ce:	e68d      	b.n	80002ec <__aeabi_dmul+0x48>
 80005d0:	4652      	mov	r2, sl
 80005d2:	9b00      	ldr	r3, [sp, #0]
 80005d4:	4332      	orrs	r2, r6
 80005d6:	d110      	bne.n	80005fa <__aeabi_dmul+0x356>
 80005d8:	4915      	ldr	r1, [pc, #84]	; (8000630 <__aeabi_dmul+0x38c>)
 80005da:	2600      	movs	r6, #0
 80005dc:	468c      	mov	ip, r1
 80005de:	4463      	add	r3, ip
 80005e0:	4649      	mov	r1, r9
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2302      	movs	r3, #2
 80005e6:	4319      	orrs	r1, r3
 80005e8:	4689      	mov	r9, r1
 80005ea:	2002      	movs	r0, #2
 80005ec:	e69d      	b.n	800032a <__aeabi_dmul+0x86>
 80005ee:	465b      	mov	r3, fp
 80005f0:	9701      	str	r7, [sp, #4]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d000      	beq.n	80005f8 <__aeabi_dmul+0x354>
 80005f6:	e6ad      	b.n	8000354 <__aeabi_dmul+0xb0>
 80005f8:	e6c3      	b.n	8000382 <__aeabi_dmul+0xde>
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <__aeabi_dmul+0x38c>)
 80005fc:	2003      	movs	r0, #3
 80005fe:	4694      	mov	ip, r2
 8000600:	4463      	add	r3, ip
 8000602:	464a      	mov	r2, r9
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2303      	movs	r3, #3
 8000608:	431a      	orrs	r2, r3
 800060a:	4691      	mov	r9, r2
 800060c:	4652      	mov	r2, sl
 800060e:	e68c      	b.n	800032a <__aeabi_dmul+0x86>
 8000610:	220c      	movs	r2, #12
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2303      	movs	r3, #3
 8000616:	0005      	movs	r5, r0
 8000618:	4691      	mov	r9, r2
 800061a:	469b      	mov	fp, r3
 800061c:	e666      	b.n	80002ec <__aeabi_dmul+0x48>
 800061e:	2304      	movs	r3, #4
 8000620:	4699      	mov	r9, r3
 8000622:	2300      	movs	r3, #0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	2400      	movs	r4, #0
 800062a:	469b      	mov	fp, r3
 800062c:	e65e      	b.n	80002ec <__aeabi_dmul+0x48>
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	000007ff 	.word	0x000007ff
 8000634:	fffffc01 	.word	0xfffffc01
 8000638:	08001f50 	.word	0x08001f50
 800063c:	000003ff 	.word	0x000003ff
 8000640:	feffffff 	.word	0xfeffffff
 8000644:	000007fe 	.word	0x000007fe
 8000648:	fffffc0d 	.word	0xfffffc0d
 800064c:	4649      	mov	r1, r9
 800064e:	2301      	movs	r3, #1
 8000650:	4319      	orrs	r1, r3
 8000652:	4689      	mov	r9, r1
 8000654:	2600      	movs	r6, #0
 8000656:	2001      	movs	r0, #1
 8000658:	e667      	b.n	800032a <__aeabi_dmul+0x86>
 800065a:	2300      	movs	r3, #0
 800065c:	2480      	movs	r4, #128	; 0x80
 800065e:	2500      	movs	r5, #0
 8000660:	4a43      	ldr	r2, [pc, #268]	; (8000770 <__aeabi_dmul+0x4cc>)
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	0324      	lsls	r4, r4, #12
 8000666:	e67e      	b.n	8000366 <__aeabi_dmul+0xc2>
 8000668:	2001      	movs	r0, #1
 800066a:	1a40      	subs	r0, r0, r1
 800066c:	2838      	cmp	r0, #56	; 0x38
 800066e:	dd00      	ble.n	8000672 <__aeabi_dmul+0x3ce>
 8000670:	e676      	b.n	8000360 <__aeabi_dmul+0xbc>
 8000672:	281f      	cmp	r0, #31
 8000674:	dd5b      	ble.n	800072e <__aeabi_dmul+0x48a>
 8000676:	221f      	movs	r2, #31
 8000678:	0023      	movs	r3, r4
 800067a:	4252      	negs	r2, r2
 800067c:	1a51      	subs	r1, r2, r1
 800067e:	40cb      	lsrs	r3, r1
 8000680:	0019      	movs	r1, r3
 8000682:	2820      	cmp	r0, #32
 8000684:	d003      	beq.n	800068e <__aeabi_dmul+0x3ea>
 8000686:	4a3b      	ldr	r2, [pc, #236]	; (8000774 <__aeabi_dmul+0x4d0>)
 8000688:	4462      	add	r2, ip
 800068a:	4094      	lsls	r4, r2
 800068c:	4325      	orrs	r5, r4
 800068e:	1e6a      	subs	r2, r5, #1
 8000690:	4195      	sbcs	r5, r2
 8000692:	002a      	movs	r2, r5
 8000694:	430a      	orrs	r2, r1
 8000696:	2107      	movs	r1, #7
 8000698:	000d      	movs	r5, r1
 800069a:	2400      	movs	r4, #0
 800069c:	4015      	ands	r5, r2
 800069e:	4211      	tst	r1, r2
 80006a0:	d05b      	beq.n	800075a <__aeabi_dmul+0x4b6>
 80006a2:	210f      	movs	r1, #15
 80006a4:	2400      	movs	r4, #0
 80006a6:	4011      	ands	r1, r2
 80006a8:	2904      	cmp	r1, #4
 80006aa:	d053      	beq.n	8000754 <__aeabi_dmul+0x4b0>
 80006ac:	1d11      	adds	r1, r2, #4
 80006ae:	4291      	cmp	r1, r2
 80006b0:	4192      	sbcs	r2, r2
 80006b2:	4252      	negs	r2, r2
 80006b4:	18a4      	adds	r4, r4, r2
 80006b6:	000a      	movs	r2, r1
 80006b8:	0223      	lsls	r3, r4, #8
 80006ba:	d54b      	bpl.n	8000754 <__aeabi_dmul+0x4b0>
 80006bc:	2201      	movs	r2, #1
 80006be:	2400      	movs	r4, #0
 80006c0:	2500      	movs	r5, #0
 80006c2:	e650      	b.n	8000366 <__aeabi_dmul+0xc2>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	031b      	lsls	r3, r3, #12
 80006c8:	421c      	tst	r4, r3
 80006ca:	d009      	beq.n	80006e0 <__aeabi_dmul+0x43c>
 80006cc:	421e      	tst	r6, r3
 80006ce:	d107      	bne.n	80006e0 <__aeabi_dmul+0x43c>
 80006d0:	4333      	orrs	r3, r6
 80006d2:	031c      	lsls	r4, r3, #12
 80006d4:	4643      	mov	r3, r8
 80006d6:	0015      	movs	r5, r2
 80006d8:	0b24      	lsrs	r4, r4, #12
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <__aeabi_dmul+0x4cc>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	e642      	b.n	8000366 <__aeabi_dmul+0xc2>
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0312      	lsls	r2, r2, #12
 80006e4:	4314      	orrs	r4, r2
 80006e6:	0324      	lsls	r4, r4, #12
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <__aeabi_dmul+0x4cc>)
 80006ea:	0b24      	lsrs	r4, r4, #12
 80006ec:	9701      	str	r7, [sp, #4]
 80006ee:	e63a      	b.n	8000366 <__aeabi_dmul+0xc2>
 80006f0:	f000 f914 	bl	800091c <__clzsi2>
 80006f4:	0001      	movs	r1, r0
 80006f6:	0002      	movs	r2, r0
 80006f8:	3115      	adds	r1, #21
 80006fa:	3220      	adds	r2, #32
 80006fc:	291c      	cmp	r1, #28
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_dmul+0x45e>
 8000700:	e74b      	b.n	800059a <__aeabi_dmul+0x2f6>
 8000702:	0034      	movs	r4, r6
 8000704:	3808      	subs	r0, #8
 8000706:	2500      	movs	r5, #0
 8000708:	4084      	lsls	r4, r0
 800070a:	e750      	b.n	80005ae <__aeabi_dmul+0x30a>
 800070c:	f000 f906 	bl	800091c <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	001a      	movs	r2, r3
 8000714:	3215      	adds	r2, #21
 8000716:	3020      	adds	r0, #32
 8000718:	2a1c      	cmp	r2, #28
 800071a:	dc00      	bgt.n	800071e <__aeabi_dmul+0x47a>
 800071c:	e71e      	b.n	800055c <__aeabi_dmul+0x2b8>
 800071e:	4656      	mov	r6, sl
 8000720:	3b08      	subs	r3, #8
 8000722:	2200      	movs	r2, #0
 8000724:	409e      	lsls	r6, r3
 8000726:	e723      	b.n	8000570 <__aeabi_dmul+0x2cc>
 8000728:	9b00      	ldr	r3, [sp, #0]
 800072a:	469c      	mov	ip, r3
 800072c:	e6e6      	b.n	80004fc <__aeabi_dmul+0x258>
 800072e:	4912      	ldr	r1, [pc, #72]	; (8000778 <__aeabi_dmul+0x4d4>)
 8000730:	0022      	movs	r2, r4
 8000732:	4461      	add	r1, ip
 8000734:	002e      	movs	r6, r5
 8000736:	408d      	lsls	r5, r1
 8000738:	408a      	lsls	r2, r1
 800073a:	40c6      	lsrs	r6, r0
 800073c:	1e69      	subs	r1, r5, #1
 800073e:	418d      	sbcs	r5, r1
 8000740:	4332      	orrs	r2, r6
 8000742:	432a      	orrs	r2, r5
 8000744:	40c4      	lsrs	r4, r0
 8000746:	0753      	lsls	r3, r2, #29
 8000748:	d0b6      	beq.n	80006b8 <__aeabi_dmul+0x414>
 800074a:	210f      	movs	r1, #15
 800074c:	4011      	ands	r1, r2
 800074e:	2904      	cmp	r1, #4
 8000750:	d1ac      	bne.n	80006ac <__aeabi_dmul+0x408>
 8000752:	e7b1      	b.n	80006b8 <__aeabi_dmul+0x414>
 8000754:	0765      	lsls	r5, r4, #29
 8000756:	0264      	lsls	r4, r4, #9
 8000758:	0b24      	lsrs	r4, r4, #12
 800075a:	08d2      	lsrs	r2, r2, #3
 800075c:	4315      	orrs	r5, r2
 800075e:	2200      	movs	r2, #0
 8000760:	e601      	b.n	8000366 <__aeabi_dmul+0xc2>
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0312      	lsls	r2, r2, #12
 8000766:	4314      	orrs	r4, r2
 8000768:	0324      	lsls	r4, r4, #12
 800076a:	4a01      	ldr	r2, [pc, #4]	; (8000770 <__aeabi_dmul+0x4cc>)
 800076c:	0b24      	lsrs	r4, r4, #12
 800076e:	e5fa      	b.n	8000366 <__aeabi_dmul+0xc2>
 8000770:	000007ff 	.word	0x000007ff
 8000774:	0000043e 	.word	0x0000043e
 8000778:	0000041e 	.word	0x0000041e

0800077c <__aeabi_f2d>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	0043      	lsls	r3, r0, #1
 8000780:	0246      	lsls	r6, r0, #9
 8000782:	0fc4      	lsrs	r4, r0, #31
 8000784:	20fe      	movs	r0, #254	; 0xfe
 8000786:	0e1b      	lsrs	r3, r3, #24
 8000788:	1c59      	adds	r1, r3, #1
 800078a:	0a75      	lsrs	r5, r6, #9
 800078c:	4208      	tst	r0, r1
 800078e:	d00c      	beq.n	80007aa <__aeabi_f2d+0x2e>
 8000790:	22e0      	movs	r2, #224	; 0xe0
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	4694      	mov	ip, r2
 8000796:	076d      	lsls	r5, r5, #29
 8000798:	0b36      	lsrs	r6, r6, #12
 800079a:	4463      	add	r3, ip
 800079c:	051b      	lsls	r3, r3, #20
 800079e:	4333      	orrs	r3, r6
 80007a0:	07e4      	lsls	r4, r4, #31
 80007a2:	4323      	orrs	r3, r4
 80007a4:	0028      	movs	r0, r5
 80007a6:	0019      	movs	r1, r3
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d114      	bne.n	80007d8 <__aeabi_f2d+0x5c>
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d01b      	beq.n	80007ea <__aeabi_f2d+0x6e>
 80007b2:	0028      	movs	r0, r5
 80007b4:	f000 f8b2 	bl	800091c <__clzsi2>
 80007b8:	280a      	cmp	r0, #10
 80007ba:	dc1c      	bgt.n	80007f6 <__aeabi_f2d+0x7a>
 80007bc:	230b      	movs	r3, #11
 80007be:	002e      	movs	r6, r5
 80007c0:	1a1b      	subs	r3, r3, r0
 80007c2:	40de      	lsrs	r6, r3
 80007c4:	0003      	movs	r3, r0
 80007c6:	3315      	adds	r3, #21
 80007c8:	409d      	lsls	r5, r3
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <__aeabi_f2d+0x88>)
 80007cc:	0336      	lsls	r6, r6, #12
 80007ce:	1a12      	subs	r2, r2, r0
 80007d0:	0552      	lsls	r2, r2, #21
 80007d2:	0b36      	lsrs	r6, r6, #12
 80007d4:	0d53      	lsrs	r3, r2, #21
 80007d6:	e7e1      	b.n	800079c <__aeabi_f2d+0x20>
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d009      	beq.n	80007f0 <__aeabi_f2d+0x74>
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0b36      	lsrs	r6, r6, #12
 80007e0:	0312      	lsls	r2, r2, #12
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <__aeabi_f2d+0x8c>)
 80007e4:	076d      	lsls	r5, r5, #29
 80007e6:	4316      	orrs	r6, r2
 80007e8:	e7d8      	b.n	800079c <__aeabi_f2d+0x20>
 80007ea:	2300      	movs	r3, #0
 80007ec:	2600      	movs	r6, #0
 80007ee:	e7d5      	b.n	800079c <__aeabi_f2d+0x20>
 80007f0:	2600      	movs	r6, #0
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <__aeabi_f2d+0x8c>)
 80007f4:	e7d2      	b.n	800079c <__aeabi_f2d+0x20>
 80007f6:	0003      	movs	r3, r0
 80007f8:	3b0b      	subs	r3, #11
 80007fa:	409d      	lsls	r5, r3
 80007fc:	002e      	movs	r6, r5
 80007fe:	2500      	movs	r5, #0
 8000800:	e7e3      	b.n	80007ca <__aeabi_f2d+0x4e>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	00000389 	.word	0x00000389
 8000808:	000007ff 	.word	0x000007ff

0800080c <__aeabi_d2f>:
 800080c:	0002      	movs	r2, r0
 800080e:	004b      	lsls	r3, r1, #1
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	0d5b      	lsrs	r3, r3, #21
 8000814:	030c      	lsls	r4, r1, #12
 8000816:	4e3d      	ldr	r6, [pc, #244]	; (800090c <__aeabi_d2f+0x100>)
 8000818:	0a64      	lsrs	r4, r4, #9
 800081a:	0f40      	lsrs	r0, r0, #29
 800081c:	1c5f      	adds	r7, r3, #1
 800081e:	0fc9      	lsrs	r1, r1, #31
 8000820:	4304      	orrs	r4, r0
 8000822:	00d5      	lsls	r5, r2, #3
 8000824:	4237      	tst	r7, r6
 8000826:	d00a      	beq.n	800083e <__aeabi_d2f+0x32>
 8000828:	4839      	ldr	r0, [pc, #228]	; (8000910 <__aeabi_d2f+0x104>)
 800082a:	181e      	adds	r6, r3, r0
 800082c:	2efe      	cmp	r6, #254	; 0xfe
 800082e:	dd16      	ble.n	800085e <__aeabi_d2f+0x52>
 8000830:	20ff      	movs	r0, #255	; 0xff
 8000832:	2400      	movs	r4, #0
 8000834:	05c0      	lsls	r0, r0, #23
 8000836:	4320      	orrs	r0, r4
 8000838:	07c9      	lsls	r1, r1, #31
 800083a:	4308      	orrs	r0, r1
 800083c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083e:	2b00      	cmp	r3, #0
 8000840:	d106      	bne.n	8000850 <__aeabi_d2f+0x44>
 8000842:	432c      	orrs	r4, r5
 8000844:	d026      	beq.n	8000894 <__aeabi_d2f+0x88>
 8000846:	2205      	movs	r2, #5
 8000848:	0192      	lsls	r2, r2, #6
 800084a:	0a54      	lsrs	r4, r2, #9
 800084c:	b2d8      	uxtb	r0, r3
 800084e:	e7f1      	b.n	8000834 <__aeabi_d2f+0x28>
 8000850:	4325      	orrs	r5, r4
 8000852:	d0ed      	beq.n	8000830 <__aeabi_d2f+0x24>
 8000854:	2080      	movs	r0, #128	; 0x80
 8000856:	03c0      	lsls	r0, r0, #15
 8000858:	4304      	orrs	r4, r0
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	e7ea      	b.n	8000834 <__aeabi_d2f+0x28>
 800085e:	2e00      	cmp	r6, #0
 8000860:	dd1b      	ble.n	800089a <__aeabi_d2f+0x8e>
 8000862:	0192      	lsls	r2, r2, #6
 8000864:	1e53      	subs	r3, r2, #1
 8000866:	419a      	sbcs	r2, r3
 8000868:	00e4      	lsls	r4, r4, #3
 800086a:	0f6d      	lsrs	r5, r5, #29
 800086c:	4322      	orrs	r2, r4
 800086e:	432a      	orrs	r2, r5
 8000870:	0753      	lsls	r3, r2, #29
 8000872:	d048      	beq.n	8000906 <__aeabi_d2f+0xfa>
 8000874:	230f      	movs	r3, #15
 8000876:	4013      	ands	r3, r2
 8000878:	2b04      	cmp	r3, #4
 800087a:	d000      	beq.n	800087e <__aeabi_d2f+0x72>
 800087c:	3204      	adds	r2, #4
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	04db      	lsls	r3, r3, #19
 8000882:	4013      	ands	r3, r2
 8000884:	d03f      	beq.n	8000906 <__aeabi_d2f+0xfa>
 8000886:	1c70      	adds	r0, r6, #1
 8000888:	2efe      	cmp	r6, #254	; 0xfe
 800088a:	d0d1      	beq.n	8000830 <__aeabi_d2f+0x24>
 800088c:	0192      	lsls	r2, r2, #6
 800088e:	0a54      	lsrs	r4, r2, #9
 8000890:	b2c0      	uxtb	r0, r0
 8000892:	e7cf      	b.n	8000834 <__aeabi_d2f+0x28>
 8000894:	2000      	movs	r0, #0
 8000896:	2400      	movs	r4, #0
 8000898:	e7cc      	b.n	8000834 <__aeabi_d2f+0x28>
 800089a:	0032      	movs	r2, r6
 800089c:	3217      	adds	r2, #23
 800089e:	db22      	blt.n	80008e6 <__aeabi_d2f+0xda>
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	0400      	lsls	r0, r0, #16
 80008a4:	4320      	orrs	r0, r4
 80008a6:	241e      	movs	r4, #30
 80008a8:	1ba4      	subs	r4, r4, r6
 80008aa:	2c1f      	cmp	r4, #31
 80008ac:	dd1d      	ble.n	80008ea <__aeabi_d2f+0xde>
 80008ae:	2202      	movs	r2, #2
 80008b0:	4252      	negs	r2, r2
 80008b2:	1b96      	subs	r6, r2, r6
 80008b4:	0002      	movs	r2, r0
 80008b6:	40f2      	lsrs	r2, r6
 80008b8:	0016      	movs	r6, r2
 80008ba:	2c20      	cmp	r4, #32
 80008bc:	d004      	beq.n	80008c8 <__aeabi_d2f+0xbc>
 80008be:	4a15      	ldr	r2, [pc, #84]	; (8000914 <__aeabi_d2f+0x108>)
 80008c0:	4694      	mov	ip, r2
 80008c2:	4463      	add	r3, ip
 80008c4:	4098      	lsls	r0, r3
 80008c6:	4305      	orrs	r5, r0
 80008c8:	002a      	movs	r2, r5
 80008ca:	1e53      	subs	r3, r2, #1
 80008cc:	419a      	sbcs	r2, r3
 80008ce:	4332      	orrs	r2, r6
 80008d0:	2600      	movs	r6, #0
 80008d2:	0753      	lsls	r3, r2, #29
 80008d4:	d1ce      	bne.n	8000874 <__aeabi_d2f+0x68>
 80008d6:	2480      	movs	r4, #128	; 0x80
 80008d8:	0013      	movs	r3, r2
 80008da:	04e4      	lsls	r4, r4, #19
 80008dc:	2001      	movs	r0, #1
 80008de:	4023      	ands	r3, r4
 80008e0:	4222      	tst	r2, r4
 80008e2:	d1d3      	bne.n	800088c <__aeabi_d2f+0x80>
 80008e4:	e7b0      	b.n	8000848 <__aeabi_d2f+0x3c>
 80008e6:	2300      	movs	r3, #0
 80008e8:	e7ad      	b.n	8000846 <__aeabi_d2f+0x3a>
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <__aeabi_d2f+0x10c>)
 80008ec:	4694      	mov	ip, r2
 80008ee:	002a      	movs	r2, r5
 80008f0:	40e2      	lsrs	r2, r4
 80008f2:	0014      	movs	r4, r2
 80008f4:	002a      	movs	r2, r5
 80008f6:	4463      	add	r3, ip
 80008f8:	409a      	lsls	r2, r3
 80008fa:	4098      	lsls	r0, r3
 80008fc:	1e55      	subs	r5, r2, #1
 80008fe:	41aa      	sbcs	r2, r5
 8000900:	4302      	orrs	r2, r0
 8000902:	4322      	orrs	r2, r4
 8000904:	e7e4      	b.n	80008d0 <__aeabi_d2f+0xc4>
 8000906:	0033      	movs	r3, r6
 8000908:	e79e      	b.n	8000848 <__aeabi_d2f+0x3c>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	000007fe 	.word	0x000007fe
 8000910:	fffffc80 	.word	0xfffffc80
 8000914:	fffffca2 	.word	0xfffffca2
 8000918:	fffffc82 	.word	0xfffffc82

0800091c <__clzsi2>:
 800091c:	211c      	movs	r1, #28
 800091e:	2301      	movs	r3, #1
 8000920:	041b      	lsls	r3, r3, #16
 8000922:	4298      	cmp	r0, r3
 8000924:	d301      	bcc.n	800092a <__clzsi2+0xe>
 8000926:	0c00      	lsrs	r0, r0, #16
 8000928:	3910      	subs	r1, #16
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	4298      	cmp	r0, r3
 800092e:	d301      	bcc.n	8000934 <__clzsi2+0x18>
 8000930:	0a00      	lsrs	r0, r0, #8
 8000932:	3908      	subs	r1, #8
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	4298      	cmp	r0, r3
 8000938:	d301      	bcc.n	800093e <__clzsi2+0x22>
 800093a:	0900      	lsrs	r0, r0, #4
 800093c:	3904      	subs	r1, #4
 800093e:	a202      	add	r2, pc, #8	; (adr r2, 8000948 <__clzsi2+0x2c>)
 8000940:	5c10      	ldrb	r0, [r2, r0]
 8000942:	1840      	adds	r0, r0, r1
 8000944:	4770      	bx	lr
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	02020304 	.word	0x02020304
 800094c:	01010101 	.word	0x01010101
	...

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b500      	push	{lr}
 800095a:	b08d      	sub	sp, #52	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095c:	2218      	movs	r2, #24
 800095e:	2100      	movs	r1, #0
 8000960:	a806      	add	r0, sp, #24
 8000962:	f001 fae1 	bl	8001f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000966:	2214      	movs	r2, #20
 8000968:	2100      	movs	r1, #0
 800096a:	4668      	mov	r0, sp
 800096c:	f001 fadc 	bl	8001f28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	33fe      	adds	r3, #254	; 0xfe
 8000976:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	3bc0      	subs	r3, #192	; 0xc0
 800097c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f000 ff49 	bl	8001814 <HAL_RCC_OscConfig>
 8000982:	2800      	cmp	r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000986:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	2207      	movs	r2, #7
 800098c:	2300      	movs	r3, #0
 800098e:	9200      	str	r2, [sp, #0]
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000996:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000998:	2101      	movs	r1, #1
 800099a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	9202      	str	r2, [sp, #8]
 800099e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a0:	f001 f89c 	bl	8001adc <HAL_RCC_ClockConfig>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x54>
 80009a8:	b672      	cpsid	i
  while (1)
 80009aa:	e7fe      	b.n	80009aa <SystemClock_Config+0x52>
}
 80009ac:	b00d      	add	sp, #52	; 0x34
 80009ae:	bd00      	pop	{pc}

080009b0 <PeriphCommonClock_Config>:
{
 80009b0:	b500      	push	{lr}
 80009b2:	b089      	sub	sp, #36	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	2218      	movs	r2, #24
 80009b6:	2100      	movs	r1, #0
 80009b8:	a802      	add	r0, sp, #8
 80009ba:	f001 fab5 	bl	8001f28 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSIKER;
 80009be:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSIKER;
 80009c2:	061b      	lsls	r3, r3, #24
 80009c4:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	f001 f973 	bl	8001cb0 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d001      	beq.n	80009d2 <PeriphCommonClock_Config+0x22>
 80009ce:	b672      	cpsid	i
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <PeriphCommonClock_Config+0x20>
}
 80009d2:	b009      	add	sp, #36	; 0x24
 80009d4:	bd00      	pop	{pc}
 80009d6:	46c0      	nop			; (mov r8, r8)

080009d8 <main>:
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	46ce      	mov	lr, r9
 80009dc:	4647      	mov	r7, r8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2501      	movs	r5, #1
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b087      	sub	sp, #28
  HAL_Init();
 80009e4:	f000 fa52 	bl	8000e8c <HAL_Init>
  SystemClock_Config();
 80009e8:	f7ff ffb6 	bl	8000958 <SystemClock_Config>
  PeriphCommonClock_Config();
 80009ec:	f7ff ffe0 	bl	80009b0 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <main+0x218>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f2:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2009      	movs	r0, #9
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	432a      	orrs	r2, r5
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
 80009fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  hadc1.Instance = ADC1;
 80009fe:	4e7d      	ldr	r6, [pc, #500]	; (8000bf4 <main+0x21c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	402a      	ands	r2, r5
 8000a02:	9200      	str	r2, [sp, #0]
 8000a04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a08:	432a      	orrs	r2, r5
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	402b      	ands	r3, r5
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a16:	f000 fcbf 	bl	8001398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f000 fcee 	bl	80013fc <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a20:	220c      	movs	r2, #12
 8000a22:	2100      	movs	r1, #0
 8000a24:	a802      	add	r0, sp, #8
 8000a26:	f001 fa7f 	bl	8001f28 <memset>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a2a:	2280      	movs	r2, #128	; 0x80
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a2c:	23c0      	movs	r3, #192	; 0xc0
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2e:	2000      	movs	r0, #0
 8000a30:	2103      	movs	r1, #3
  hadc1.Instance = ADC1;
 8000a32:	4c71      	ldr	r4, [pc, #452]	; (8000bf8 <main+0x220>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a34:	0392      	lsls	r2, r2, #14
 8000a36:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a38:	2208      	movs	r2, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a3a:	061b      	lsls	r3, r3, #24
 8000a3c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3e:	2300      	movs	r3, #0
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a40:	6320      	str	r0, [r4, #48]	; 0x30
 8000a42:	6361      	str	r1, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a44:	2100      	movs	r1, #0
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a46:	6162      	str	r2, [r4, #20]
  hadc1.Init.NbrOfConversion = 6;
 8000a48:	3a02      	subs	r2, #2
 8000a4a:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a4c:	3226      	adds	r2, #38	; 0x26
 8000a4e:	54a5      	strb	r5, [r4, r2]
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 8000a50:	3a29      	subs	r2, #41	; 0x29
 8000a52:	63a2      	str	r2, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a54:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8000a56:	3239      	adds	r2, #57	; 0x39
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a58:	8323      	strh	r3, [r4, #24]
  hadc1.Instance = ADC1;
 8000a5a:	6026      	str	r6, [r4, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5e:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a60:	76a5      	strb	r5, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a62:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.OversamplingMode = DISABLE;
 8000a66:	54a1      	strb	r1, [r4, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a68:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6a:	f000 fa2d 	bl	8000ec8 <HAL_ADC_Init>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d001      	beq.n	8000a76 <main+0x9e>
 8000a72:	b672      	cpsid	i
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x9c>
  sConfig.Channel = ADC_CHANNEL_0;
 8000a76:	2201      	movs	r2, #1
 8000a78:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a7a:	9004      	str	r0, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	a902      	add	r1, sp, #8
 8000a7e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8000a80:	9202      	str	r2, [sp, #8]
 8000a82:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	f000 fb4e 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d001      	beq.n	8000a90 <main+0xb8>
 8000a8c:	b672      	cpsid	i
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <main+0xb6>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a90:	2304      	movs	r3, #4
 8000a92:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <main+0x224>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	0020      	movs	r0, r4
 8000a96:	a902      	add	r1, sp, #8
  sConfig.Channel = ADC_CHANNEL_1;
 8000a98:	9202      	str	r2, [sp, #8]
 8000a9a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	f000 fb42 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <main+0xd0>
 8000aa4:	b672      	cpsid	i
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <main+0xce>
  sConfig.Channel = ADC_CHANNEL_2;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4a55      	ldr	r2, [pc, #340]	; (8000c00 <main+0x228>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	0020      	movs	r0, r4
 8000aae:	a902      	add	r1, sp, #8
  sConfig.Channel = ADC_CHANNEL_2;
 8000ab0:	9202      	str	r2, [sp, #8]
 8000ab2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab4:	f000 fb36 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d001      	beq.n	8000ac0 <main+0xe8>
 8000abc:	b672      	cpsid	i
  while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_3;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	4a50      	ldr	r2, [pc, #320]	; (8000c04 <main+0x22c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	a902      	add	r1, sp, #8
  sConfig.Channel = ADC_CHANNEL_3;
 8000ac8:	9202      	str	r2, [sp, #8]
 8000aca:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000acc:	f000 fb2a 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <main+0x100>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0xfe>
  sConfig.Channel = ADC_CHANNEL_4;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <main+0x230>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	0020      	movs	r0, r4
 8000ade:	a902      	add	r1, sp, #8
  sConfig.Channel = ADC_CHANNEL_4;
 8000ae0:	9202      	str	r2, [sp, #8]
 8000ae2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	f000 fb1e 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d001      	beq.n	8000af0 <main+0x118>
 8000aec:	b672      	cpsid	i
  while (1)
 8000aee:	e7fe      	b.n	8000aee <main+0x116>
  sConfig.Channel = ADC_CHANNEL_5;
 8000af0:	2314      	movs	r3, #20
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <main+0x234>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	0020      	movs	r0, r4
 8000af6:	a902      	add	r1, sp, #8
  sConfig.Channel = ADC_CHANNEL_5;
 8000af8:	9202      	str	r2, [sp, #8]
 8000afa:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	f000 fb12 	bl	8001124 <HAL_ADC_ConfigChannel>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x130>
 8000b04:	b672      	cpsid	i
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x12e>
  htim16.Instance = TIM16;
 8000b08:	4841      	ldr	r0, [pc, #260]	; (8000c10 <main+0x238>)
 8000b0a:	4a42      	ldr	r2, [pc, #264]	; (8000c14 <main+0x23c>)
  htim16.Init.Prescaler = 0;
 8000b0c:	6043      	str	r3, [r0, #4]
  htim16.Instance = TIM16;
 8000b0e:	6002      	str	r2, [r0, #0]
  htim16.Init.Period = 65000;
 8000b10:	4a41      	ldr	r2, [pc, #260]	; (8000c18 <main+0x240>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 65000;
 8000b14:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b18:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b1c:	f001 f96e 	bl	8001dfc <HAL_TIM_Base_Init>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d001      	beq.n	8000b28 <main+0x150>
 8000b24:	b672      	cpsid	i
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <main+0x14e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b28:	68b3      	ldr	r3, [r6, #8]
 8000b2a:	075b      	lsls	r3, r3, #29
 8000b2c:	d45e      	bmi.n	8000bec <main+0x214>
  		  __HAL_LOCK(&hadc1);
 8000b2e:	2354      	movs	r3, #84	; 0x54
 8000b30:	5ce3      	ldrb	r3, [r4, r3]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d05a      	beq.n	8000bec <main+0x214>
 8000b36:	2354      	movs	r3, #84	; 0x54
 8000b38:	2201      	movs	r2, #1
 8000b3a:	54e2      	strb	r2, [r4, r3]
  	      if ((ADC1->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <main+0x21c>)
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	4211      	tst	r1, r2
 8000b42:	d10d      	bne.n	8000b60 <main+0x188>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b44:	6899      	ldr	r1, [r3, #8]
  	           if (LL_ADC_IsEnabled(ADC1) != 0UL)
 8000b46:	4211      	tst	r1, r2
 8000b48:	d005      	beq.n	8000b56 <main+0x17e>
  MODIFY_REG(ADCx->CR,
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	4933      	ldr	r1, [pc, #204]	; (8000c1c <main+0x244>)
 8000b4e:	4011      	ands	r1, r2
 8000b50:	2202      	movs	r2, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	609a      	str	r2, [r3, #8]
  	             ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 8000b56:	2301      	movs	r3, #1
 8000b58:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <main+0x21c>)
 8000b5a:	68d1      	ldr	r1, [r2, #12]
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CR,
 8000b60:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <main+0x21c>)
 8000b62:	492e      	ldr	r1, [pc, #184]	; (8000c1c <main+0x244>)
 8000b64:	6893      	ldr	r3, [r2, #8]
  	      ADC_CLEAR_ERRORCODE(&hadc1);
 8000b66:	2500      	movs	r5, #0
 8000b68:	400b      	ands	r3, r1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6093      	str	r3, [r2, #8]
  	      __HAL_ADC_CLEAR_FLAG(&hadc1, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b70:	231c      	movs	r3, #28
 8000b72:	6820      	ldr	r0, [r4, #0]
  	      ADC_CLEAR_ERRORCODE(&hadc1);
 8000b74:	65e5      	str	r5, [r4, #92]	; 0x5c
  	      __HAL_ADC_CLEAR_FLAG(&hadc1, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b76:	6003      	str	r3, [r0, #0]
  	      __HAL_UNLOCK(&hadc1);
 8000b78:	3338      	adds	r3, #56	; 0x38
 8000b7a:	54e5      	strb	r5, [r4, r3]
  	      ADC1->IER |= ADC_IT_OVR;
 8000b7c:	6854      	ldr	r4, [r2, #4]
 8000b7e:	3b44      	subs	r3, #68	; 0x44
 8000b80:	4323      	orrs	r3, r4
 8000b82:	6053      	str	r3, [r2, #4]
  	      __HAL_LOCK(&hdma_adc1);
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <main+0x248>)
 8000b86:	469c      	mov	ip, r3
 8000b88:	2324      	movs	r3, #36	; 0x24
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	464c      	mov	r4, r9
 8000b90:	5d1b      	ldrb	r3, [r3, r4]
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d02a      	beq.n	8000bec <main+0x214>
  	      DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <main+0x24c>)
  	      DMA1->IFCR |= (DMA_FLAG_TC1 | DMA_FLAG_HT1 | DMA_FLAG_GI1);
 8000b98:	4f23      	ldr	r7, [pc, #140]	; (8000c28 <main+0x250>)
  	      DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000b9a:	681c      	ldr	r4, [r3, #0]
  	      DMA1_Channel1->CPAR = (uint32_t)&hadc1.Instance->DR;
 8000b9c:	3040      	adds	r0, #64	; 0x40
  	      DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000b9e:	438c      	bics	r4, r1
 8000ba0:	601c      	str	r4, [r3, #0]
  	      DMA1->IFCR |= (DMA_FLAG_TC1 | DMA_FLAG_HT1 | DMA_FLAG_GI1);
 8000ba2:	687c      	ldr	r4, [r7, #4]
 8000ba4:	46a0      	mov	r8, r4
 8000ba6:	2407      	movs	r4, #7
 8000ba8:	4646      	mov	r6, r8
 8000baa:	4334      	orrs	r4, r6
 8000bac:	607c      	str	r4, [r7, #4]
  	      DMA1_Channel1->CNDTR = numChannelsADC;
 8000bae:	2406      	movs	r4, #6
 8000bb0:	605c      	str	r4, [r3, #4]
  	      DMA1_Channel1->CPAR = (uint32_t)&hadc1.Instance->DR;
 8000bb2:	6098      	str	r0, [r3, #8]
  	      DMA1_Channel1->CMAR = (uint32_t)adcData;
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <main+0x254>)
 8000bb6:	60d8      	str	r0, [r3, #12]
  	      DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000bb8:	2020      	movs	r0, #32
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4320      	orrs	r0, r4
 8000bbe:	6018      	str	r0, [r3, #0]
  	      DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	4384      	bics	r4, r0
 8000bc6:	601c      	str	r4, [r3, #0]
  	      DMA1_Channel1->CCR |=  DMA_CCR_TCIE;
 8000bc8:	2402      	movs	r4, #2
 8000bca:	681f      	ldr	r7, [r3, #0]
 8000bcc:	433c      	orrs	r4, r7
 8000bce:	601c      	str	r4, [r3, #0]
  	      DMA1_Channel1->CCR |=  DMA_CCR_EN;
 8000bd0:	681c      	ldr	r4, [r3, #0]
 8000bd2:	430c      	orrs	r4, r1
 8000bd4:	601c      	str	r4, [r3, #0]
  	      __HAL_UNLOCK(&hdma_adc1);
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	464c      	mov	r4, r9
 8000bda:	551d      	strb	r5, [r3, r4]
  	      TIM16->CNT = 0;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <main+0x23c>)
 8000bde:	625d      	str	r5, [r3, #36]	; 0x24
  	      TIM16->CR1 |= TIM_CR1_CEN;
 8000be0:	681c      	ldr	r4, [r3, #0]
 8000be2:	4321      	orrs	r1, r4
 8000be4:	6019      	str	r1, [r3, #0]
  	      ADC1->CR |= (1<<2);
 8000be6:	6893      	ldr	r3, [r2, #8]
 8000be8:	4318      	orrs	r0, r3
 8000bea:	6090      	str	r0, [r2, #8]
  while (1)
 8000bec:	e7fe      	b.n	8000bec <main+0x214>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40012400 	.word	0x40012400
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	04000002 	.word	0x04000002
 8000c00:	08000004 	.word	0x08000004
 8000c04:	0c000008 	.word	0x0c000008
 8000c08:	10000010 	.word	0x10000010
 8000c0c:	14000020 	.word	0x14000020
 8000c10:	200000f8 	.word	0x200000f8
 8000c14:	40014400 	.word	0x40014400
 8000c18:	0000fde8 	.word	0x0000fde8
 8000c1c:	7fffffe8 	.word	0x7fffffe8
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	40020008 	.word	0x40020008
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <HAL_ADC_ConvCpltCallback>:
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
	TIM16->CR1 &= ~TIM_CR1_CEN;
 8000c32:	2501      	movs	r5, #1
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	43ab      	bics	r3, r5
 8000c3a:	6023      	str	r3, [r4, #0]
    elapsedTime = (float)(TIM16->CNT)/48.0; /* Elapsed time for TIM16 in microseconds */
 8000c3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c3e:	f7ff faef 	bl	8000220 <__aeabi_ui2f>
 8000c42:	f7ff fd9b 	bl	800077c <__aeabi_f2d>
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_ADC_ConvCpltCallback+0x38>)
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000c4a:	f7ff fb2b 	bl	80002a4 <__aeabi_dmul>
 8000c4e:	f7ff fddd 	bl	800080c <__aeabi_d2f>
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_ADC_ConvCpltCallback+0x40>)
 8000c54:	6018      	str	r0, [r3, #0]
    TIM16->CNT = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	6263      	str	r3, [r4, #36]	; 0x24
    TIM16->CR1 |= TIM_CR1_CEN;
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	432b      	orrs	r3, r5
 8000c5e:	6023      	str	r3, [r4, #0]
}
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40014400 	.word	0x40014400
 8000c68:	55555555 	.word	0x55555555
 8000c6c:	3f955555 	.word	0x3f955555
 8000c70:	20000034 	.word	0x20000034

08000c74 <Error_Handler>:
 8000c74:	b672      	cpsid	i
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <Error_Handler+0x2>

08000c78 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_MspInit+0x2c>)
{
 8000c7c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c80:	4311      	orrs	r1, r2
 8000c82:	6419      	str	r1, [r3, #64]	; 0x40
 8000c84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c86:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	9200      	str	r2, [sp, #0]
 8000c8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c90:	0549      	lsls	r1, r1, #21
 8000c92:	430a      	orrs	r2, r1
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c98:	400b      	ands	r3, r1
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	b002      	add	sp, #8
 8000ca0:	4770      	bx	lr
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	0004      	movs	r4, r0
 8000cac:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	2214      	movs	r2, #20
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	f001 f938 	bl	8001f28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	221c      	movs	r2, #28
 8000cba:	2100      	movs	r1, #0
 8000cbc:	a807      	add	r0, sp, #28
 8000cbe:	f001 f933 	bl	8001f28 <memset>
  if(hadc->Instance==ADC1)
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_ADC_MspInit+0xb8>)
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	b00e      	add	sp, #56	; 0x38
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	01db      	lsls	r3, r3, #7
 8000cd2:	9307      	str	r3, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSIKER;
 8000cd4:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd6:	a807      	add	r0, sp, #28
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSIKER;
 8000cd8:	061b      	lsls	r3, r3, #24
 8000cda:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f000 ffe8 	bl	8001cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d137      	bne.n	8000d54 <HAL_ADC_MspInit+0xac>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_ADC_MspInit+0xbc>)
 8000ce8:	0340      	lsls	r0, r0, #13
 8000cea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	6419      	str	r1, [r3, #64]	; 0x40
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	4002      	ands	r2, r0
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4311      	orrs	r1, r2
 8000d02:	6359      	str	r1, [r3, #52]	; 0x34
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	401a      	ands	r2, r3
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d0e:	223f      	movs	r2, #63	; 0x3f
 8000d10:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d14:	9202      	str	r2, [sp, #8]
 8000d16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f000 fc6d 	bl	80015f8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000d1e:	4d12      	ldr	r5, [pc, #72]	; (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d22:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	337b      	adds	r3, #123	; 0x7b
 8000d2c:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d2e:	3380      	adds	r3, #128	; 0x80
 8000d30:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d3c:	23c0      	movs	r3, #192	; 0xc0
 8000d3e:	019b      	lsls	r3, r3, #6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d44:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d46:	f000 fb7f 	bl	8001448 <HAL_DMA_Init>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d105      	bne.n	8000d5a <HAL_ADC_MspInit+0xb2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4e:	6525      	str	r5, [r4, #80]	; 0x50
 8000d50:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8000d52:	e7ba      	b.n	8000cca <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8000d54:	f7ff ff8e 	bl	8000c74 <Error_Handler>
 8000d58:	e7c4      	b.n	8000ce4 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8000d5a:	f7ff ff8b 	bl	8000c74 <Error_Handler>
 8000d5e:	e7f6      	b.n	8000d4e <HAL_ADC_MspInit+0xa6>
 8000d60:	40012400 	.word	0x40012400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	2000009c 	.word	0x2000009c
 8000d6c:	40020008 	.word	0x40020008

08000d70 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_TIM_Base_MspInit+0x24>)
 8000d72:	6802      	ldr	r2, [r0, #0]
{
 8000d74:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM16)
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d001      	beq.n	8000d7e <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d7a:	b002      	add	sp, #8
 8000d7c:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d7e:	2080      	movs	r0, #128	; 0x80
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_TIM_Base_MspInit+0x28>)
 8000d82:	0280      	lsls	r0, r0, #10
 8000d84:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d86:	4301      	orrs	r1, r0
 8000d88:	6411      	str	r1, [r2, #64]	; 0x40
 8000d8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d8c:	4003      	ands	r3, r0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	9b01      	ldr	r3, [sp, #4]
}
 8000d92:	e7f2      	b.n	8000d7a <HAL_TIM_Base_MspInit+0xa>
 8000d94:	40014400 	.word	0x40014400
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler>
 8000d9e:	46c0      	nop			; (mov r8, r8)

08000da0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <HardFault_Handler>
 8000da2:	46c0      	nop			; (mov r8, r8)

08000da4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da4:	4770      	bx	lr
 8000da6:	46c0      	nop			; (mov r8, r8)

08000da8 <PendSV_Handler>:
 8000da8:	4770      	bx	lr
 8000daa:	46c0      	nop			; (mov r8, r8)

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f879 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <DMA1_Channel1_IRQHandler>:
  */
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	/* Check if the interrupt was triggered by DMA transfer complete flag, done to improve performance */
  if(DMA1->ISR & (1<<1))
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <DMA1_Channel1_IRQHandler+0x1c>)
{
 8000db6:	b510      	push	{r4, lr}
  if(DMA1->ISR & (1<<1))
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	079b      	lsls	r3, r3, #30
 8000dbc:	d403      	bmi.n	8000dc6 <DMA1_Channel1_IRQHandler+0x12>
  {
     HAL_ADC_ConvCpltCallback((ADC_HandleTypeDef *)ADC1);
  }

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <DMA1_Channel1_IRQHandler+0x20>)
 8000dc0:	f000 fbbe 	bl	8001540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc4:	bd10      	pop	{r4, pc}
     HAL_ADC_ConvCpltCallback((ADC_HandleTypeDef *)ADC1);
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <DMA1_Channel1_IRQHandler+0x24>)
 8000dc8:	f7ff ff32 	bl	8000c30 <HAL_ADC_ConvCpltCallback>
 8000dcc:	e7f7      	b.n	8000dbe <DMA1_Channel1_IRQHandler+0xa>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	2000009c 	.word	0x2000009c
 8000dd8:	40012400 	.word	0x40012400

08000ddc <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <SystemInit+0xc>)
 8000de0:	0512      	lsls	r2, r2, #20
 8000de2:	609a      	str	r2, [r3, #8]
#endif
}
 8000de4:	4770      	bx	lr
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000df0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000df2:	e003      	b.n	8000dfc <LoopCopyDataInit>

08000df4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000df6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000df8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dfa:	3104      	adds	r1, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopForever+0xa>)
  ldr r3, =_edata
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopForever+0xe>)
  adds r2, r0, r1
 8000e00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e04:	d3f6      	bcc.n	8000df4 <CopyDataInit>
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopForever+0x12>)
  b LoopFillZerobss
 8000e08:	e002      	b.n	8000e10 <LoopFillZerobss>

08000e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0e:	3204      	adds	r2, #4

08000e10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <LoopForever+0x16>)
  cmp r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e14:	d3f9      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e16:	f7ff ffe1 	bl	8000ddc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f001 f861 	bl	8001ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fddb 	bl	80009d8 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000e28:	08001fd8 	.word	0x08001fd8
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e34:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000e38:	20000148 	.word	0x20000148

08000e3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_InitTick+0x40>)
{
 8000e42:	b510      	push	{r4, lr}
  if (uwTickFreq != 0U)
 8000e44:	6819      	ldr	r1, [r3, #0]
{
 8000e46:	0004      	movs	r4, r0
  if (uwTickFreq != 0U)
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e4e:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e50:	20fa      	movs	r0, #250	; 0xfa
 8000e52:	0080      	lsls	r0, r0, #2
 8000e54:	f7ff f958 	bl	8000108 <__udivsi3>
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_InitTick+0x44>)
 8000e5a:	0001      	movs	r1, r0
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	f7ff f953 	bl	8000108 <__udivsi3>
 8000e62:	f000 fad7 	bl	8001414 <HAL_SYSTICK_Config>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	2c03      	cmp	r4, #3
 8000e6c:	d8ee      	bhi.n	8000e4c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	3801      	subs	r0, #1
 8000e70:	2200      	movs	r2, #0
 8000e72:	0021      	movs	r1, r4
 8000e74:	f000 fa90 	bl	8001398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_InitTick+0x48>)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	601c      	str	r4, [r3, #0]
  return status;
 8000e7e:	e7e6      	b.n	8000e4e <HAL_InitTick+0xe>
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_Init>:
{
 8000e8c:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f7ff ffd6 	bl	8000e40 <HAL_InitTick>
 8000e94:	1e04      	subs	r4, r0, #0
 8000e96:	d002      	beq.n	8000e9e <HAL_Init+0x12>
    status = HAL_ERROR;
 8000e98:	2401      	movs	r4, #1
}
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000e9e:	f7ff feeb 	bl	8000c78 <HAL_MspInit>
 8000ea2:	e7fa      	b.n	8000e9a <HAL_Init+0xe>

08000ea4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_IncTick+0x10>)
 8000ea6:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <HAL_IncTick+0x14>)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	6809      	ldr	r1, [r1, #0]
 8000eac:	185b      	adds	r3, r3, r1
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	4770      	bx	lr
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000144 	.word	0x20000144
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <HAL_GetTick+0x8>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
}
 8000ec0:	4770      	bx	lr
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000144 	.word	0x20000144

08000ec8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	46c6      	mov	lr, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ecc:	2300      	movs	r3, #0
{
 8000ece:	b500      	push	{lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8000ed4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ed6:	d100      	bne.n	8000eda <HAL_ADC_Init+0x12>
 8000ed8:	e0da      	b.n	8001090 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d100      	bne.n	8000ee2 <HAL_ADC_Init+0x1a>
 8000ee0:	e0aa      	b.n	8001038 <HAL_ADC_Init+0x170>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ee2:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ee4:	6825      	ldr	r5, [r4, #0]
 8000ee6:	055b      	lsls	r3, r3, #21
 8000ee8:	68aa      	ldr	r2, [r5, #8]
 8000eea:	421a      	tst	r2, r3
 8000eec:	d114      	bne.n	8000f18 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8000eee:	68aa      	ldr	r2, [r5, #8]
 8000ef0:	4984      	ldr	r1, [pc, #528]	; (8001104 <HAL_ADC_Init+0x23c>)
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ef8:	4b83      	ldr	r3, [pc, #524]	; (8001108 <HAL_ADC_Init+0x240>)
 8000efa:	4984      	ldr	r1, [pc, #528]	; (800110c <HAL_ADC_Init+0x244>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	f7ff f903 	bl	8000108 <__udivsi3>
 8000f02:	0040      	lsls	r0, r0, #1
 8000f04:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8000f06:	9b01      	ldr	r3, [sp, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8000f0c:	9b01      	ldr	r3, [sp, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f9      	bne.n	8000f0c <HAL_ADC_Init+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f18:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	d400      	bmi.n	8000f22 <HAL_ADC_Init+0x5a>
 8000f20:	e07d      	b.n	800101e <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f22:	68ab      	ldr	r3, [r5, #8]
 8000f24:	075b      	lsls	r3, r3, #29
 8000f26:	d509      	bpl.n	8000f3c <HAL_ADC_Init+0x74>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f28:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2a:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f30:	4313      	orrs	r3, r2
 8000f32:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000f34:	b002      	add	sp, #8
 8000f36:	bc80      	pop	{r7}
 8000f38:	46b8      	mov	r8, r7
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f3e:	06db      	lsls	r3, r3, #27
 8000f40:	d4f3      	bmi.n	8000f2a <HAL_ADC_Init+0x62>
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f44:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_ADC_Init+0x248>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	3206      	adds	r2, #6
 8000f4a:	32ff      	adds	r2, #255	; 0xff
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f50:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f52:	07db      	lsls	r3, r3, #31
 8000f54:	d476      	bmi.n	8001044 <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f56:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f58:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f5a:	0377      	lsls	r7, r6, #13
 8000f5c:	46bc      	mov	ip, r7
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f5e:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f60:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f62:	03db      	lsls	r3, r3, #15
 8000f64:	4698      	mov	r8, r3
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f66:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f68:	0389      	lsls	r1, r1, #14
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f6a:	2f00      	cmp	r7, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_ADC_Init+0xaa>
 8000f6e:	2780      	movs	r7, #128	; 0x80
 8000f70:	017f      	lsls	r7, r7, #5
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4643      	mov	r3, r8
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4663      	mov	r3, ip
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f7e:	6921      	ldr	r1, [r4, #16]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	2900      	cmp	r1, #0
 8000f84:	da00      	bge.n	8000f88 <HAL_ADC_Init+0xc0>
 8000f86:	e0a7      	b.n	80010d8 <HAL_ADC_Init+0x210>
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	039b      	lsls	r3, r3, #14
 8000f8c:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f8e:	232c      	movs	r3, #44	; 0x2c
 8000f90:	5ce3      	ldrb	r3, [r4, r3]
 8000f92:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f94:	4313      	orrs	r3, r2
 8000f96:	433b      	orrs	r3, r7
 8000f98:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f9a:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f9c:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f9e:	5de2      	ldrb	r2, [r4, r7]
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d100      	bne.n	8000fa6 <HAL_ADC_Init+0xde>
 8000fa4:	e09c      	b.n	80010e0 <HAL_ADC_Init+0x218>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fac:	26e0      	movs	r6, #224	; 0xe0
 8000fae:	0076      	lsls	r6, r6, #1
 8000fb0:	4032      	ands	r2, r6
 8000fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000fb4:	4332      	orrs	r2, r6
 8000fb6:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fb8:	68ea      	ldr	r2, [r5, #12]
 8000fba:	4e56      	ldr	r6, [pc, #344]	; (8001114 <HAL_ADC_Init+0x24c>)
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000fbc:	6867      	ldr	r7, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fbe:	4032      	ands	r2, r6
 8000fc0:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000fc2:	0fbe      	lsrs	r6, r7, #30
 8000fc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fc6:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000fc8:	07b3      	lsls	r3, r6, #30
 8000fca:	4698      	mov	r8, r3
 8000fcc:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8000fce:	233c      	movs	r3, #60	; 0x3c
 8000fd0:	5ce3      	ldrb	r3, [r4, r3]
 8000fd2:	469c      	mov	ip, r3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d109      	bne.n	8000fec <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fda:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000fdc:	4333      	orrs	r3, r6
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	4662      	mov	r2, ip
 8000fea:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8000fec:	692b      	ldr	r3, [r5, #16]
 8000fee:	4e4a      	ldr	r6, [pc, #296]	; (8001118 <HAL_ADC_Init+0x250>)
 8000ff0:	4033      	ands	r3, r6
 8000ff2:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ff4:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000ff6:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ff8:	007b      	lsls	r3, r7, #1
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	05d2      	lsls	r2, r2, #23
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d021      	beq.n	8001046 <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	061b      	lsls	r3, r3, #24
 8001006:	429f      	cmp	r7, r3
 8001008:	d01d      	beq.n	8001046 <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 800100a:	4a44      	ldr	r2, [pc, #272]	; (800111c <HAL_ADC_Init+0x254>)
 800100c:	4e44      	ldr	r6, [pc, #272]	; (8001120 <HAL_ADC_Init+0x258>)
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	4033      	ands	r3, r6
 8001012:	26f0      	movs	r6, #240	; 0xf0
 8001014:	03b6      	lsls	r6, r6, #14
 8001016:	4037      	ands	r7, r6
 8001018:	431f      	orrs	r7, r3
 800101a:	6017      	str	r7, [r2, #0]
 800101c:	e013      	b.n	8001046 <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101e:	2210      	movs	r2, #16
 8001020:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001022:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001024:	4313      	orrs	r3, r2
 8001026:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800102a:	3a0f      	subs	r2, #15
 800102c:	4313      	orrs	r3, r2
 800102e:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001030:	68ab      	ldr	r3, [r5, #8]
 8001032:	075b      	lsls	r3, r3, #29
 8001034:	d582      	bpl.n	8000f3c <HAL_ADC_Init+0x74>
 8001036:	e777      	b.n	8000f28 <HAL_ADC_Init+0x60>
    HAL_ADC_MspInit(hadc);
 8001038:	f7ff fe36 	bl	8000ca8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 800103c:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800103e:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001040:	54e5      	strb	r5, [r4, r3]
 8001042:	e74e      	b.n	8000ee2 <HAL_ADC_Init+0x1a>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001044:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8001046:	2207      	movs	r2, #7
 8001048:	2770      	movs	r7, #112	; 0x70
 800104a:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800104c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800104e:	4393      	bics	r3, r2
 8001050:	4333      	orrs	r3, r6
 8001052:	616b      	str	r3, [r5, #20]
 8001054:	696a      	ldr	r2, [r5, #20]
 8001056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001058:	43ba      	bics	r2, r7
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4313      	orrs	r3, r2
 800105e:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001060:	2900      	cmp	r1, #0
 8001062:	d117      	bne.n	8001094 <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8001064:	2310      	movs	r3, #16
 8001066:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001068:	425b      	negs	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800106e:	2307      	movs	r3, #7
 8001070:	696a      	ldr	r2, [r5, #20]
 8001072:	4013      	ands	r3, r2
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001074:	429e      	cmp	r6, r3
 8001076:	d026      	beq.n	80010c6 <HAL_ADC_Init+0x1fe>
      ADC_STATE_CLR_SET(hadc->State,
 8001078:	2212      	movs	r2, #18
 800107a:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 800107c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800107e:	4393      	bics	r3, r2
 8001080:	3a02      	subs	r2, #2
 8001082:	4313      	orrs	r3, r2
 8001084:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001086:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001088:	3a0f      	subs	r2, #15
 800108a:	4313      	orrs	r3, r2
 800108c:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 800108e:	e751      	b.n	8000f34 <HAL_ADC_Init+0x6c>
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
 8001092:	e74f      	b.n	8000f34 <HAL_ADC_Init+0x6c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	4299      	cmp	r1, r3
 800109a:	d1e8      	bne.n	800106e <HAL_ADC_Init+0x1a6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800109c:	230f      	movs	r3, #15
 800109e:	001a      	movs	r2, r3
 80010a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80010a2:	400a      	ands	r2, r1
 80010a4:	2a0f      	cmp	r2, #15
 80010a6:	d003      	beq.n	80010b0 <HAL_ADC_Init+0x1e8>
 80010a8:	090a      	lsrs	r2, r1, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d024      	beq.n	80010fa <HAL_ADC_Init+0x232>
        MODIFY_REG(hadc->Instance->CHSELR,
 80010b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010b2:	69e3      	ldr	r3, [r4, #28]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	231c      	movs	r3, #28
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	401a      	ands	r2, r3
 80010bc:	3b2c      	subs	r3, #44	; 0x2c
 80010be:	4093      	lsls	r3, r2
 80010c0:	430b      	orrs	r3, r1
 80010c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80010c4:	e7d3      	b.n	800106e <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 80010c6:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80010c8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80010ca:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80010cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ce:	4393      	bics	r3, r2
 80010d0:	3a02      	subs	r2, #2
 80010d2:	4313      	orrs	r3, r2
 80010d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80010d6:	e72d      	b.n	8000f34 <HAL_ADC_Init+0x6c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010d8:	004b      	lsls	r3, r1, #1
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	469c      	mov	ip, r3
 80010de:	e756      	b.n	8000f8e <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d103      	bne.n	80010ec <HAL_ADC_Init+0x224>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	0252      	lsls	r2, r2, #9
 80010e8:	4313      	orrs	r3, r2
 80010ea:	e75c      	b.n	8000fa6 <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ec:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80010ee:	4337      	orrs	r7, r6
 80010f0:	65a7      	str	r7, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f2:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80010f4:	4332      	orrs	r2, r6
 80010f6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80010f8:	e755      	b.n	8000fa6 <HAL_ADC_Init+0xde>
        SET_BIT(hadc->Instance->CHSELR,
 80010fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80010fc:	3b1f      	subs	r3, #31
 80010fe:	4313      	orrs	r3, r2
 8001100:	62ab      	str	r3, [r5, #40]	; 0x28
 8001102:	e7b4      	b.n	800106e <HAL_ADC_Init+0x1a6>
 8001104:	6fffffe8 	.word	0x6fffffe8
 8001108:	20000000 	.word	0x20000000
 800110c:	00030d40 	.word	0x00030d40
 8001110:	fffffefd 	.word	0xfffffefd
 8001114:	fffe0201 	.word	0xfffe0201
 8001118:	1ffffc02 	.word	0x1ffffc02
 800111c:	40012708 	.word	0x40012708
 8001120:	ffc3ffff 	.word	0xffc3ffff

08001124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	464e      	mov	r6, r9
 8001128:	46de      	mov	lr, fp
 800112a:	4657      	mov	r7, sl
 800112c:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800112e:	2300      	movs	r3, #0
{
 8001130:	b5e0      	push	{r5, r6, r7, lr}
 8001132:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8001134:	9303      	str	r3, [sp, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001136:	3354      	adds	r3, #84	; 0x54
 8001138:	5cc2      	ldrb	r2, [r0, r3]
{
 800113a:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113c:	6906      	ldr	r6, [r0, #16]
  __HAL_LOCK(hadc);
 800113e:	2a01      	cmp	r2, #1
 8001140:	d100      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x20>
 8001142:	e08b      	b.n	800125c <HAL_ADC_ConfigChannel+0x138>
 8001144:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001146:	2204      	movs	r2, #4
 8001148:	54e0      	strb	r0, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	689d      	ldr	r5, [r3, #8]
 800114e:	422a      	tst	r2, r5
 8001150:	d00d      	beq.n	800116e <HAL_ADC_ConfigChannel+0x4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001154:	321c      	adds	r2, #28
 8001156:	4313      	orrs	r3, r2
 8001158:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800115a:	2354      	movs	r3, #84	; 0x54
 800115c:	2200      	movs	r2, #0
 800115e:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001160:	b005      	add	sp, #20
 8001162:	bcf0      	pop	{r4, r5, r6, r7}
 8001164:	46bb      	mov	fp, r7
 8001166:	46b2      	mov	sl, r6
 8001168:	46a9      	mov	r9, r5
 800116a:	46a0      	mov	r8, r4
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 800116e:	684d      	ldr	r5, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001170:	4396      	bics	r6, r2
    if (sConfig->Rank != ADC_RANK_NONE)
 8001172:	2d02      	cmp	r5, #2
 8001174:	d059      	beq.n	800122a <HAL_ADC_ConfigChannel+0x106>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001176:	2780      	movs	r7, #128	; 0x80
 8001178:	063f      	lsls	r7, r7, #24
 800117a:	42be      	cmp	r6, r7
 800117c:	d04e      	beq.n	800121c <HAL_ADC_ConfigChannel+0xf8>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800117e:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8001180:	270f      	movs	r7, #15
 8001182:	46b2      	mov	sl, r6
 8001184:	261f      	movs	r6, #31
 8001186:	46b4      	mov	ip, r6
 8001188:	402e      	ands	r6, r5
 800118a:	40b7      	lsls	r7, r6
 800118c:	46b1      	mov	r9, r6
 800118e:	43fe      	mvns	r6, r7
 8001190:	9600      	str	r6, [sp, #0]
 8001192:	4656      	mov	r6, sl
 8001194:	43be      	bics	r6, r7
 8001196:	46b0      	mov	r8, r6
 8001198:	680e      	ldr	r6, [r1, #0]
 800119a:	9701      	str	r7, [sp, #4]
 800119c:	0277      	lsls	r7, r6, #9
 800119e:	d166      	bne.n	800126e <HAL_ADC_ConfigChannel+0x14a>
 80011a0:	4660      	mov	r0, ip
 80011a2:	0eb2      	lsrs	r2, r6, #26
 80011a4:	4010      	ands	r0, r2
 80011a6:	0002      	movs	r2, r0
 80011a8:	4648      	mov	r0, r9
 80011aa:	4082      	lsls	r2, r0
 80011ac:	4640      	mov	r0, r8
 80011ae:	4310      	orrs	r0, r2
 80011b0:	4680      	mov	r8, r0
 80011b2:	4642      	mov	r2, r8
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011b4:	08ad      	lsrs	r5, r5, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011b6:	6622      	str	r2, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011b8:	69e2      	ldr	r2, [r4, #28]
 80011ba:	3501      	adds	r5, #1
 80011bc:	4295      	cmp	r5, r2
 80011be:	d808      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 80011c0:	464d      	mov	r5, r9
 80011c2:	00b2      	lsls	r2, r6, #2
 80011c4:	0f12      	lsrs	r2, r2, #28
 80011c6:	40aa      	lsls	r2, r5
 80011c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ca:	9d00      	ldr	r5, [sp, #0]
 80011cc:	4028      	ands	r0, r5
 80011ce:	4302      	orrs	r2, r0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80011d2:	0230      	lsls	r0, r6, #8
 80011d4:	688a      	ldr	r2, [r1, #8]
 80011d6:	0001      	movs	r1, r0
 80011d8:	695d      	ldr	r5, [r3, #20]
 80011da:	4002      	ands	r2, r0
 80011dc:	4867      	ldr	r0, [pc, #412]	; (800137c <HAL_ADC_ConfigChannel+0x258>)
 80011de:	438d      	bics	r5, r1
 80011e0:	4002      	ands	r2, r0
 80011e2:	432a      	orrs	r2, r5
 80011e4:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	db01      	blt.n	80011ee <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ea:	2000      	movs	r0, #0
}
 80011ec:	e7b5      	b.n	800115a <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80011ee:	21c0      	movs	r1, #192	; 0xc0
 80011f0:	4863      	ldr	r0, [pc, #396]	; (8001380 <HAL_ADC_ConfigChannel+0x25c>)
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011f2:	4a64      	ldr	r2, [pc, #400]	; (8001384 <HAL_ADC_ConfigChannel+0x260>)
 80011f4:	6803      	ldr	r3, [r0, #0]
 80011f6:	0409      	lsls	r1, r1, #16
 80011f8:	4019      	ands	r1, r3
 80011fa:	4296      	cmp	r6, r2
 80011fc:	d046      	beq.n	800128c <HAL_ADC_ConfigChannel+0x168>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80011fe:	4a62      	ldr	r2, [pc, #392]	; (8001388 <HAL_ADC_ConfigChannel+0x264>)
 8001200:	4296      	cmp	r6, r2
 8001202:	d1f2      	bne.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001204:	2580      	movs	r5, #128	; 0x80
 8001206:	03ed      	lsls	r5, r5, #15
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001208:	422b      	tst	r3, r5
 800120a:	d1ee      	bne.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800120c:	6802      	ldr	r2, [r0, #0]
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_ADC_ConfigChannel+0x268>)
 8001210:	401a      	ands	r2, r3
 8001212:	430a      	orrs	r2, r1
 8001214:	4315      	orrs	r5, r2
 8001216:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2000      	movs	r0, #0
}
 800121a:	e79e      	b.n	800115a <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800121c:	680e      	ldr	r6, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800121e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001220:	0272      	lsls	r2, r6, #9
 8001222:	0a52      	lsrs	r2, r2, #9
 8001224:	4302      	orrs	r2, r0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001228:	e7d3      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	0612      	lsls	r2, r2, #24
 800122e:	4296      	cmp	r6, r2
 8001230:	d016      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x13c>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001232:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001234:	2a00      	cmp	r2, #0
 8001236:	dad8      	bge.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001238:	4951      	ldr	r1, [pc, #324]	; (8001380 <HAL_ADC_ConfigChannel+0x25c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123a:	4852      	ldr	r0, [pc, #328]	; (8001384 <HAL_ADC_ConfigChannel+0x260>)
 800123c:	680b      	ldr	r3, [r1, #0]
 800123e:	4282      	cmp	r2, r0
 8001240:	d020      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x160>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001242:	4851      	ldr	r0, [pc, #324]	; (8001388 <HAL_ADC_ConfigChannel+0x264>)
 8001244:	4282      	cmp	r2, r0
 8001246:	d1d0      	bne.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001248:	2080      	movs	r0, #128	; 0x80
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800124a:	680a      	ldr	r2, [r1, #0]
 800124c:	0400      	lsls	r0, r0, #16
 800124e:	4003      	ands	r3, r0
 8001250:	484e      	ldr	r0, [pc, #312]	; (800138c <HAL_ADC_ConfigChannel+0x268>)
 8001252:	4002      	ands	r2, r0
 8001254:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2000      	movs	r0, #0
 8001258:	600b      	str	r3, [r1, #0]
 800125a:	e77e      	b.n	800115a <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 800125c:	2002      	movs	r0, #2
 800125e:	e77f      	b.n	8001160 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001260:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001262:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001264:	0250      	lsls	r0, r2, #9
 8001266:	0a40      	lsrs	r0, r0, #9
 8001268:	4381      	bics	r1, r0
 800126a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800126c:	e7e2      	b.n	8001234 <HAL_ADC_ConfigChannel+0x110>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800126e:	4230      	tst	r0, r6
 8001270:	d19f      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x8e>
 8001272:	2702      	movs	r7, #2
 8001274:	4237      	tst	r7, r6
 8001276:	d028      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x1a6>
 8001278:	464a      	mov	r2, r9
 800127a:	4090      	lsls	r0, r2
 800127c:	4642      	mov	r2, r8
 800127e:	4302      	orrs	r2, r0
 8001280:	4690      	mov	r8, r2
 8001282:	e796      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x8e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001284:	2080      	movs	r0, #128	; 0x80
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001286:	680a      	ldr	r2, [r1, #0]
 8001288:	03c0      	lsls	r0, r0, #15
 800128a:	e7e0      	b.n	800124e <HAL_ADC_ConfigChannel+0x12a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800128c:	2580      	movs	r5, #128	; 0x80
 800128e:	042d      	lsls	r5, r5, #16
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001290:	422b      	tst	r3, r5
 8001292:	d1aa      	bne.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_ADC_ConfigChannel+0x268>)
 8001298:	401a      	ands	r2, r3
 800129a:	430a      	orrs	r2, r1
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800129c:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_ADC_ConfigChannel+0x26c>)
 800129e:	4315      	orrs	r5, r2
 80012a0:	6005      	str	r5, [r0, #0]
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	493b      	ldr	r1, [pc, #236]	; (8001394 <HAL_ADC_ConfigChannel+0x270>)
 80012a6:	f7fe ff2f 	bl	8000108 <__udivsi3>
 80012aa:	0043      	lsls	r3, r0, #1
 80012ac:	181b      	adds	r3, r3, r0
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3301      	adds	r3, #1
 80012b2:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80012b4:	9b03      	ldr	r3, [sp, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d097      	beq.n	80011ea <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 80012ba:	9b03      	ldr	r3, [sp, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80012c0:	9b03      	ldr	r3, [sp, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e747      	b.n	800115a <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012ca:	4232      	tst	r2, r6
 80012cc:	d001      	beq.n	80012d2 <HAL_ADC_ConfigChannel+0x1ae>
 80012ce:	003a      	movs	r2, r7
 80012d0:	e76a      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012d2:	0732      	lsls	r2, r6, #28
 80012d4:	d501      	bpl.n	80012da <HAL_ADC_ConfigChannel+0x1b6>
 80012d6:	2203      	movs	r2, #3
 80012d8:	e766      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012da:	06f2      	lsls	r2, r6, #27
 80012dc:	d501      	bpl.n	80012e2 <HAL_ADC_ConfigChannel+0x1be>
 80012de:	2204      	movs	r2, #4
 80012e0:	e762      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012e2:	06b2      	lsls	r2, r6, #26
 80012e4:	d501      	bpl.n	80012ea <HAL_ADC_ConfigChannel+0x1c6>
 80012e6:	2205      	movs	r2, #5
 80012e8:	e75e      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012ea:	0672      	lsls	r2, r6, #25
 80012ec:	d501      	bpl.n	80012f2 <HAL_ADC_ConfigChannel+0x1ce>
 80012ee:	2206      	movs	r2, #6
 80012f0:	e75a      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012f2:	0632      	lsls	r2, r6, #24
 80012f4:	d501      	bpl.n	80012fa <HAL_ADC_ConfigChannel+0x1d6>
 80012f6:	2207      	movs	r2, #7
 80012f8:	e756      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 80012fa:	05f2      	lsls	r2, r6, #23
 80012fc:	d501      	bpl.n	8001302 <HAL_ADC_ConfigChannel+0x1de>
 80012fe:	2208      	movs	r2, #8
 8001300:	e752      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001302:	05b2      	lsls	r2, r6, #22
 8001304:	d501      	bpl.n	800130a <HAL_ADC_ConfigChannel+0x1e6>
 8001306:	2209      	movs	r2, #9
 8001308:	e74e      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 800130a:	0572      	lsls	r2, r6, #21
 800130c:	d501      	bpl.n	8001312 <HAL_ADC_ConfigChannel+0x1ee>
 800130e:	220a      	movs	r2, #10
 8001310:	e74a      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001312:	0532      	lsls	r2, r6, #20
 8001314:	d501      	bpl.n	800131a <HAL_ADC_ConfigChannel+0x1f6>
 8001316:	220b      	movs	r2, #11
 8001318:	e746      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 800131a:	04f2      	lsls	r2, r6, #19
 800131c:	d501      	bpl.n	8001322 <HAL_ADC_ConfigChannel+0x1fe>
 800131e:	220c      	movs	r2, #12
 8001320:	e742      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001322:	04b2      	lsls	r2, r6, #18
 8001324:	d501      	bpl.n	800132a <HAL_ADC_ConfigChannel+0x206>
 8001326:	220d      	movs	r2, #13
 8001328:	e73e      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 800132a:	0472      	lsls	r2, r6, #17
 800132c:	d501      	bpl.n	8001332 <HAL_ADC_ConfigChannel+0x20e>
 800132e:	220e      	movs	r2, #14
 8001330:	e73a      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001332:	0432      	lsls	r2, r6, #16
 8001334:	d504      	bpl.n	8001340 <HAL_ADC_ConfigChannel+0x21c>
 8001336:	4652      	mov	r2, sl
 8001338:	9801      	ldr	r0, [sp, #4]
 800133a:	4302      	orrs	r2, r0
 800133c:	4690      	mov	r8, r2
 800133e:	e738      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x8e>
 8001340:	03f2      	lsls	r2, r6, #15
 8001342:	d501      	bpl.n	8001348 <HAL_ADC_ConfigChannel+0x224>
 8001344:	2210      	movs	r2, #16
 8001346:	e72f      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001348:	03b2      	lsls	r2, r6, #14
 800134a:	d501      	bpl.n	8001350 <HAL_ADC_ConfigChannel+0x22c>
 800134c:	2211      	movs	r2, #17
 800134e:	e72b      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001350:	0372      	lsls	r2, r6, #13
 8001352:	d501      	bpl.n	8001358 <HAL_ADC_ConfigChannel+0x234>
 8001354:	2212      	movs	r2, #18
 8001356:	e727      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001358:	0332      	lsls	r2, r6, #12
 800135a:	d501      	bpl.n	8001360 <HAL_ADC_ConfigChannel+0x23c>
 800135c:	2213      	movs	r2, #19
 800135e:	e723      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001360:	02f2      	lsls	r2, r6, #11
 8001362:	d501      	bpl.n	8001368 <HAL_ADC_ConfigChannel+0x244>
 8001364:	2214      	movs	r2, #20
 8001366:	e71f      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001368:	02b2      	lsls	r2, r6, #10
 800136a:	d501      	bpl.n	8001370 <HAL_ADC_ConfigChannel+0x24c>
 800136c:	2215      	movs	r2, #21
 800136e:	e71b      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 8001370:	0272      	lsls	r2, r6, #9
 8001372:	d400      	bmi.n	8001376 <HAL_ADC_ConfigChannel+0x252>
 8001374:	e71d      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x8e>
 8001376:	2216      	movs	r2, #22
 8001378:	e716      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x84>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	7fffff00 	.word	0x7fffff00
 8001380:	40012708 	.word	0x40012708
 8001384:	a4000200 	.word	0xa4000200
 8001388:	a8000400 	.word	0xa8000400
 800138c:	ff3fffff 	.word	0xff3fffff
 8001390:	20000000 	.word	0x20000000
 8001394:	00030d40 	.word	0x00030d40

08001398 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800139a:	2800      	cmp	r0, #0
 800139c:	db14      	blt.n	80013c8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_NVIC_SetPriority+0x5c>)
 80013a0:	2203      	movs	r2, #3
 80013a2:	469c      	mov	ip, r3
 80013a4:	23ff      	movs	r3, #255	; 0xff
 80013a6:	0884      	lsrs	r4, r0, #2
 80013a8:	4010      	ands	r0, r2
 80013aa:	001a      	movs	r2, r3
 80013ac:	26c0      	movs	r6, #192	; 0xc0
 80013ae:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b2:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b4:	400b      	ands	r3, r1
 80013b6:	4083      	lsls	r3, r0
 80013b8:	00a4      	lsls	r4, r4, #2
 80013ba:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013bc:	00b6      	lsls	r6, r6, #2
 80013be:	59a5      	ldr	r5, [r4, r6]
 80013c0:	4395      	bics	r5, r2
 80013c2:	432b      	orrs	r3, r5
 80013c4:	51a3      	str	r3, [r4, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_NVIC_SetPriority+0x60>)
 80013ca:	230f      	movs	r3, #15
 80013cc:	4694      	mov	ip, r2
 80013ce:	2203      	movs	r2, #3
 80013d0:	4003      	ands	r3, r0
 80013d2:	4010      	ands	r0, r2
 80013d4:	32fc      	adds	r2, #252	; 0xfc
 80013d6:	0015      	movs	r5, r2
 80013d8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013da:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	400a      	ands	r2, r1
 80013e0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	3b08      	subs	r3, #8
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4463      	add	r3, ip
 80013ea:	69dc      	ldr	r4, [r3, #28]
 80013ec:	43ac      	bics	r4, r5
 80013ee:	4322      	orrs	r2, r4
 80013f0:	61da      	str	r2, [r3, #28]
 80013f2:	e7e8      	b.n	80013c6 <HAL_NVIC_SetPriority+0x2e>
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013fc:	2800      	cmp	r0, #0
 80013fe:	db05      	blt.n	800140c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001400:	231f      	movs	r3, #31
 8001402:	4018      	ands	r0, r3
 8001404:	3b1e      	subs	r3, #30
 8001406:	4083      	lsls	r3, r0
 8001408:	4a01      	ldr	r2, [pc, #4]	; (8001410 <HAL_NVIC_EnableIRQ+0x14>)
 800140a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800140c:	4770      	bx	lr
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	e000e100 	.word	0xe000e100

08001414 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	1e43      	subs	r3, r0, #1
 8001418:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	4293      	cmp	r3, r2
 800141e:	d20e      	bcs.n	800143e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	6a03      	ldr	r3, [r0, #32]
 800142a:	0609      	lsls	r1, r1, #24
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	430b      	orrs	r3, r1
 8001432:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001436:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	3307      	adds	r3, #7
 800143c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800143e:	4770      	bx	lr
 8001440:	e000e010 	.word	0xe000e010
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	46ce      	mov	lr, r9
 800144c:	4647      	mov	r7, r8
 800144e:	0004      	movs	r4, r0
 8001450:	b580      	push	{r7, lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001452:	2800      	cmp	r0, #0
 8001454:	d065      	beq.n	8001522 <HAL_DMA_Init+0xda>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001456:	6805      	ldr	r5, [r0, #0]
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_DMA_Init+0xe0>)
 800145a:	2114      	movs	r1, #20
 800145c:	18e8      	adds	r0, r5, r3
 800145e:	f7fe fe53 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001462:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001464:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001466:	2202      	movs	r2, #2
 8001468:	2325      	movs	r3, #37	; 0x25
 800146a:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_DMA_Init+0xe4>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001470:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001472:	4013      	ands	r3, r2
 8001474:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	6921      	ldr	r1, [r4, #16]
 800147a:	4333      	orrs	r3, r6
 800147c:	430b      	orrs	r3, r1
 800147e:	6961      	ldr	r1, [r4, #20]
 8001480:	682a      	ldr	r2, [r5, #0]
 8001482:	430b      	orrs	r3, r1
 8001484:	69a1      	ldr	r1, [r4, #24]
 8001486:	430b      	orrs	r3, r1
 8001488:	69e1      	ldr	r1, [r4, #28]
 800148a:	430b      	orrs	r3, r1
 800148c:	6a21      	ldr	r1, [r4, #32]
 800148e:	430b      	orrs	r3, r1
 8001490:	4313      	orrs	r3, r2
 8001492:	602b      	str	r3, [r5, #0]
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_DMA_Init+0xe8>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001496:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001498:	469c      	mov	ip, r3
                                                             ((hdma->ChannelIndex >> 2U) * \
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800149c:	4460      	add	r0, ip
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800149e:	64a3      	str	r3, [r4, #72]	; 0x48
 80014a0:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	401d      	ands	r5, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80014a6:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a8:	0028      	movs	r0, r5
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80014aa:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014ac:	3808      	subs	r0, #8
 80014ae:	4699      	mov	r9, r3
 80014b0:	f7fe fe2a 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80014b4:	231c      	movs	r3, #28
 80014b6:	2201      	movs	r2, #1
 80014b8:	4003      	ands	r3, r0
 80014ba:	0010      	movs	r0, r2
 80014bc:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014be:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80014c0:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	429e      	cmp	r6, r3
 80014c6:	d022      	beq.n	800150e <HAL_DMA_Init+0xc6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014c8:	464b      	mov	r3, r9
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ca:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014cc:	6861      	ldr	r1, [r4, #4]
 80014ce:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014d0:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014d2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d4:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014d6:	2903      	cmp	r1, #3
 80014d8:	d81e      	bhi.n	8001518 <HAL_DMA_Init+0xd0>
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014da:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_DMA_Init+0xf0>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014de:	4d17      	ldr	r5, [pc, #92]	; (800153c <HAL_DMA_Init+0xf4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80014e0:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014e2:	3b01      	subs	r3, #1
 80014e4:	4003      	ands	r3, r0
 80014e6:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014e8:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80014ea:	0089      	lsls	r1, r1, #2
 80014ec:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014ee:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014f0:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014f2:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f4:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80014f8:	2225      	movs	r2, #37	; 0x25
 80014fa:	2101      	movs	r1, #1
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001500:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001502:	3a01      	subs	r2, #1
 8001504:	54a3      	strb	r3, [r4, r2]
}
 8001506:	bcc0      	pop	{r6, r7}
 8001508:	46b9      	mov	r9, r7
 800150a:	46b0      	mov	r8, r6
 800150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800150e:	2300      	movs	r3, #0
 8001510:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001512:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001514:	4643      	mov	r3, r8
 8001516:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800151c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800151e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001520:	e7e9      	b.n	80014f6 <HAL_DMA_Init+0xae>
    return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e7ef      	b.n	8001506 <HAL_DMA_Init+0xbe>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	bffdfff8 	.word	0xbffdfff8
 800152c:	ffff800f 	.word	0xffff800f
 8001530:	10008200 	.word	0x10008200
 8001534:	40020880 	.word	0x40020880
 8001538:	1000823f 	.word	0x1000823f
 800153c:	40020940 	.word	0x40020940

08001540 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <HAL_DMA_IRQHandler+0xb4>)
{
 8001542:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8001544:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001546:	2504      	movs	r5, #4
 8001548:	231c      	movs	r3, #28
 800154a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800154c:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800154e:	4023      	ands	r3, r4
 8001550:	002c      	movs	r4, r5
 8001552:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001554:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001556:	4222      	tst	r2, r4
 8001558:	d010      	beq.n	800157c <HAL_DMA_IRQHandler+0x3c>
 800155a:	4235      	tst	r5, r6
 800155c:	d00e      	beq.n	800157c <HAL_DMA_IRQHandler+0x3c>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155e:	680b      	ldr	r3, [r1, #0]
 8001560:	069b      	lsls	r3, r3, #26
 8001562:	d402      	bmi.n	800156a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001564:	680b      	ldr	r3, [r1, #0]
 8001566:	43ab      	bics	r3, r5
 8001568:	600b      	str	r3, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_DMA_IRQHandler+0xb4>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4314      	orrs	r4, r2
 8001570:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001572:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8001578:	4798      	blx	r3
}
 800157a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800157c:	2502      	movs	r5, #2
 800157e:	002c      	movs	r4, r5
 8001580:	409c      	lsls	r4, r3
 8001582:	4222      	tst	r2, r4
 8001584:	d017      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x76>
 8001586:	4235      	tst	r5, r6
 8001588:	d015      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x76>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158a:	680b      	ldr	r3, [r1, #0]
 800158c:	069b      	lsls	r3, r3, #26
 800158e:	d406      	bmi.n	800159e <HAL_DMA_IRQHandler+0x5e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001590:	220a      	movs	r2, #10
 8001592:	680b      	ldr	r3, [r1, #0]
 8001594:	4393      	bics	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001598:	2325      	movs	r3, #37	; 0x25
 800159a:	3a09      	subs	r2, #9
 800159c:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_DMA_IRQHandler+0xb4>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4314      	orrs	r4, r2
 80015a4:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2324      	movs	r3, #36	; 0x24
 80015aa:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 80015ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0e3      	beq.n	800157a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80015b2:	4798      	blx	r3
  return;
 80015b4:	e7e1      	b.n	800157a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015b6:	2408      	movs	r4, #8
 80015b8:	0025      	movs	r5, r4
 80015ba:	409d      	lsls	r5, r3
 80015bc:	422a      	tst	r2, r5
 80015be:	d0dc      	beq.n	800157a <HAL_DMA_IRQHandler+0x3a>
 80015c0:	4234      	tst	r4, r6
 80015c2:	d0da      	beq.n	800157a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c4:	680a      	ldr	r2, [r1, #0]
 80015c6:	3406      	adds	r4, #6
 80015c8:	43a2      	bics	r2, r4
 80015ca:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80015cc:	2201      	movs	r2, #1
 80015ce:	0015      	movs	r5, r2
 80015d0:	409d      	lsls	r5, r3
 80015d2:	002b      	movs	r3, r5
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <HAL_DMA_IRQHandler+0xb4>)
 80015d6:	684c      	ldr	r4, [r1, #4]
 80015d8:	4323      	orrs	r3, r4
 80015da:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80015dc:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015de:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80015e0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80015e2:	2200      	movs	r2, #0
 80015e4:	3b01      	subs	r3, #1
 80015e6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80015e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0c5      	beq.n	800157a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80015ee:	4798      	blx	r3
  return;
 80015f0:	e7c3      	b.n	800157a <HAL_DMA_IRQHandler+0x3a>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	4657      	mov	r7, sl
 8001600:	464e      	mov	r6, r9
 8001602:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001604:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8001606:	2300      	movs	r3, #0
{
 8001608:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800160a:	2d00      	cmp	r5, #0
 800160c:	d100      	bne.n	8001610 <HAL_GPIO_Init+0x18>
 800160e:	e082      	b.n	8001716 <HAL_GPIO_Init+0x11e>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001610:	4688      	mov	r8, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001612:	2401      	movs	r4, #1
 8001614:	002a      	movs	r2, r5
 8001616:	409c      	lsls	r4, r3
 8001618:	4022      	ands	r2, r4
 800161a:	4694      	mov	ip, r2
    if (iocurrent != 0U)
 800161c:	4225      	tst	r5, r4
 800161e:	d075      	beq.n	800170c <HAL_GPIO_Init+0x114>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001620:	4642      	mov	r2, r8
 8001622:	6852      	ldr	r2, [r2, #4]
 8001624:	2610      	movs	r6, #16
 8001626:	0011      	movs	r1, r2
 8001628:	43b1      	bics	r1, r6
 800162a:	4689      	mov	r9, r1
 800162c:	2902      	cmp	r1, #2
 800162e:	d100      	bne.n	8001632 <HAL_GPIO_Init+0x3a>
 8001630:	e078      	b.n	8001724 <HAL_GPIO_Init+0x12c>
      tmp = GPIOx->MODER;
 8001632:	6801      	ldr	r1, [r0, #0]
 8001634:	005e      	lsls	r6, r3, #1
 8001636:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001638:	2103      	movs	r1, #3
 800163a:	40b1      	lsls	r1, r6
 800163c:	468b      	mov	fp, r1
 800163e:	43c9      	mvns	r1, r1
 8001640:	4657      	mov	r7, sl
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	4659      	mov	r1, fp
 8001646:	438f      	bics	r7, r1
 8001648:	46bb      	mov	fp, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	2703      	movs	r7, #3
 800164c:	4017      	ands	r7, r2
 800164e:	40b7      	lsls	r7, r6
 8001650:	46ba      	mov	sl, r7
 8001652:	465f      	mov	r7, fp
 8001654:	4651      	mov	r1, sl
 8001656:	430f      	orrs	r7, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001658:	2101      	movs	r1, #1
 800165a:	4249      	negs	r1, r1
 800165c:	468a      	mov	sl, r1
 800165e:	44d1      	add	r9, sl
 8001660:	4649      	mov	r1, r9
      GPIOx->MODER = tmp;
 8001662:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001664:	2901      	cmp	r1, #1
 8001666:	d800      	bhi.n	800166a <HAL_GPIO_Init+0x72>
 8001668:	e088      	b.n	800177c <HAL_GPIO_Init+0x184>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800166a:	2a03      	cmp	r2, #3
 800166c:	d04e      	beq.n	800170c <HAL_GPIO_Init+0x114>
        tmp = GPIOx->PUPDR;
 800166e:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001670:	9901      	ldr	r1, [sp, #4]
 8001672:	4021      	ands	r1, r4
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001674:	4644      	mov	r4, r8
 8001676:	68a4      	ldr	r4, [r4, #8]
 8001678:	40b4      	lsls	r4, r6
 800167a:	4321      	orrs	r1, r4
        GPIOx->PUPDR = tmp;
 800167c:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0549      	lsls	r1, r1, #21
 8001682:	420a      	tst	r2, r1
 8001684:	d042      	beq.n	800170c <HAL_GPIO_Init+0x114>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001686:	2603      	movs	r6, #3
 8001688:	270f      	movs	r7, #15
 800168a:	4c5d      	ldr	r4, [pc, #372]	; (8001800 <HAL_GPIO_Init+0x208>)
 800168c:	401e      	ands	r6, r3
 800168e:	46a1      	mov	r9, r4
 8001690:	00f6      	lsls	r6, r6, #3
 8001692:	40b7      	lsls	r7, r6
        tmp = EXTI->EXTICR[position >> 2U];
 8001694:	0899      	lsrs	r1, r3, #2
 8001696:	0089      	lsls	r1, r1, #2
 8001698:	4449      	add	r1, r9
 800169a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800169c:	43bc      	bics	r4, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800169e:	27a0      	movs	r7, #160	; 0xa0
 80016a0:	05ff      	lsls	r7, r7, #23
 80016a2:	42b8      	cmp	r0, r7
 80016a4:	d012      	beq.n	80016cc <HAL_GPIO_Init+0xd4>
 80016a6:	4f57      	ldr	r7, [pc, #348]	; (8001804 <HAL_GPIO_Init+0x20c>)
 80016a8:	42b8      	cmp	r0, r7
 80016aa:	d100      	bne.n	80016ae <HAL_GPIO_Init+0xb6>
 80016ac:	e09c      	b.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80016ae:	4f56      	ldr	r7, [pc, #344]	; (8001808 <HAL_GPIO_Init+0x210>)
 80016b0:	42b8      	cmp	r0, r7
 80016b2:	d100      	bne.n	80016b6 <HAL_GPIO_Init+0xbe>
 80016b4:	e09c      	b.n	80017f0 <HAL_GPIO_Init+0x1f8>
 80016b6:	4f55      	ldr	r7, [pc, #340]	; (800180c <HAL_GPIO_Init+0x214>)
 80016b8:	42b8      	cmp	r0, r7
 80016ba:	d100      	bne.n	80016be <HAL_GPIO_Init+0xc6>
 80016bc:	e090      	b.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80016be:	4f54      	ldr	r7, [pc, #336]	; (8001810 <HAL_GPIO_Init+0x218>)
 80016c0:	42b8      	cmp	r0, r7
 80016c2:	d100      	bne.n	80016c6 <HAL_GPIO_Init+0xce>
 80016c4:	e098      	b.n	80017f8 <HAL_GPIO_Init+0x200>
 80016c6:	2705      	movs	r7, #5
 80016c8:	40b7      	lsls	r7, r6
 80016ca:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80016cc:	660c      	str	r4, [r1, #96]	; 0x60
        tmp = EXTI->IMR1;
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	4c4b      	ldr	r4, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x208>)
 80016d2:	5861      	ldr	r1, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 80016d4:	4664      	mov	r4, ip
 80016d6:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	03d6      	lsls	r6, r2, #15
 80016da:	d465      	bmi.n	80017a8 <HAL_GPIO_Init+0x1b0>
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 80016dc:	2680      	movs	r6, #128	; 0x80
 80016de:	4f48      	ldr	r7, [pc, #288]	; (8001800 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 80016e0:	4021      	ands	r1, r4
        EXTI->IMR1 = tmp;
 80016e2:	51b9      	str	r1, [r7, r6]

        tmp = EXTI->EMR1;
 80016e4:	2184      	movs	r1, #132	; 0x84
 80016e6:	5879      	ldr	r1, [r7, r1]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e8:	0396      	lsls	r6, r2, #14
 80016ea:	d466      	bmi.n	80017ba <HAL_GPIO_Init+0x1c2>
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 80016ec:	2684      	movs	r6, #132	; 0x84
 80016ee:	4f44      	ldr	r7, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 80016f0:	4021      	ands	r1, r4
        EXTI->EMR1 = tmp;
 80016f2:	51b9      	str	r1, [r7, r6]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016f4:	6839      	ldr	r1, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f6:	02d6      	lsls	r6, r2, #11
 80016f8:	d467      	bmi.n	80017ca <HAL_GPIO_Init+0x1d2>
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 80016fa:	4e41      	ldr	r6, [pc, #260]	; (8001800 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 80016fc:	4021      	ands	r1, r4
        EXTI->RTSR1 = tmp;
 80016fe:	6031      	str	r1, [r6, #0]

        tmp = EXTI->FTSR1;
 8001700:	6871      	ldr	r1, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001702:	0292      	lsls	r2, r2, #10
 8001704:	d468      	bmi.n	80017d8 <HAL_GPIO_Init+0x1e0>
        tmp &= ~((uint32_t)iocurrent);
 8001706:	4021      	ands	r1, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <HAL_GPIO_Init+0x208>)
 800170a:	6051      	str	r1, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800170c:	002a      	movs	r2, r5
      }
    }

    position++;
 800170e:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001710:	40da      	lsrs	r2, r3
 8001712:	d000      	beq.n	8001716 <HAL_GPIO_Init+0x11e>
 8001714:	e77d      	b.n	8001612 <HAL_GPIO_Init+0x1a>
  }
}
 8001716:	b003      	add	sp, #12
 8001718:	bcf0      	pop	{r4, r5, r6, r7}
 800171a:	46bb      	mov	fp, r7
 800171c:	46b2      	mov	sl, r6
 800171e:	46a9      	mov	r9, r5
 8001720:	46a0      	mov	r8, r4
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8001724:	08de      	lsrs	r6, r3, #3
 8001726:	00b6      	lsls	r6, r6, #2
 8001728:	1986      	adds	r6, r0, r6
 800172a:	6a31      	ldr	r1, [r6, #32]
 800172c:	468a      	mov	sl, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800172e:	2107      	movs	r1, #7
 8001730:	4019      	ands	r1, r3
 8001732:	0089      	lsls	r1, r1, #2
 8001734:	4689      	mov	r9, r1
 8001736:	210f      	movs	r1, #15
 8001738:	464f      	mov	r7, r9
 800173a:	40b9      	lsls	r1, r7
 800173c:	4657      	mov	r7, sl
 800173e:	438f      	bics	r7, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001740:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001742:	46ba      	mov	sl, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001744:	270f      	movs	r7, #15
 8001746:	6909      	ldr	r1, [r1, #16]
 8001748:	4039      	ands	r1, r7
 800174a:	464f      	mov	r7, r9
 800174c:	40b9      	lsls	r1, r7
 800174e:	4657      	mov	r7, sl
 8001750:	4339      	orrs	r1, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8001752:	6231      	str	r1, [r6, #32]
      tmp = GPIOx->MODER;
 8001754:	6801      	ldr	r1, [r0, #0]
 8001756:	005e      	lsls	r6, r3, #1
 8001758:	4689      	mov	r9, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800175a:	2103      	movs	r1, #3
 800175c:	40b1      	lsls	r1, r6
 800175e:	468a      	mov	sl, r1
 8001760:	43c9      	mvns	r1, r1
 8001762:	464f      	mov	r7, r9
 8001764:	9101      	str	r1, [sp, #4]
 8001766:	4651      	mov	r1, sl
 8001768:	438f      	bics	r7, r1
 800176a:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	2703      	movs	r7, #3
 800176e:	4017      	ands	r7, r2
 8001770:	40b7      	lsls	r7, r6
 8001772:	46b9      	mov	r9, r7
 8001774:	4657      	mov	r7, sl
 8001776:	4649      	mov	r1, r9
 8001778:	430f      	orrs	r7, r1
      GPIOx->MODER = tmp;
 800177a:	6007      	str	r7, [r0, #0]
        tmp = GPIOx->OSPEEDR;
 800177c:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800177e:	9901      	ldr	r1, [sp, #4]
 8001780:	400f      	ands	r7, r1
 8001782:	46ba      	mov	sl, r7
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001784:	4647      	mov	r7, r8
 8001786:	68ff      	ldr	r7, [r7, #12]
 8001788:	40b7      	lsls	r7, r6
 800178a:	46b9      	mov	r9, r7
 800178c:	4657      	mov	r7, sl
 800178e:	4649      	mov	r1, r9
 8001790:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = tmp;
 8001792:	6087      	str	r7, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001794:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	000f      	movs	r7, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001798:	2101      	movs	r1, #1
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179a:	43a7      	bics	r7, r4
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179c:	0914      	lsrs	r4, r2, #4
 800179e:	400c      	ands	r4, r1
 80017a0:	409c      	lsls	r4, r3
 80017a2:	433c      	orrs	r4, r7
        GPIOx->OTYPER = tmp;
 80017a4:	6044      	str	r4, [r0, #4]
 80017a6:	e760      	b.n	800166a <HAL_GPIO_Init+0x72>
          tmp |= iocurrent;
 80017a8:	4666      	mov	r6, ip
 80017aa:	4331      	orrs	r1, r6
        EXTI->IMR1 = tmp;
 80017ac:	2680      	movs	r6, #128	; 0x80
 80017ae:	4f14      	ldr	r7, [pc, #80]	; (8001800 <HAL_GPIO_Init+0x208>)
 80017b0:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->EMR1;
 80017b2:	2184      	movs	r1, #132	; 0x84
 80017b4:	5879      	ldr	r1, [r7, r1]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b6:	0396      	lsls	r6, r2, #14
 80017b8:	d598      	bpl.n	80016ec <HAL_GPIO_Init+0xf4>
          tmp |= iocurrent;
 80017ba:	4666      	mov	r6, ip
 80017bc:	4331      	orrs	r1, r6
        EXTI->EMR1 = tmp;
 80017be:	2684      	movs	r6, #132	; 0x84
 80017c0:	4f0f      	ldr	r7, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x208>)
 80017c2:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->RTSR1;
 80017c4:	6839      	ldr	r1, [r7, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c6:	02d6      	lsls	r6, r2, #11
 80017c8:	d597      	bpl.n	80016fa <HAL_GPIO_Init+0x102>
          tmp |= iocurrent;
 80017ca:	4666      	mov	r6, ip
 80017cc:	4331      	orrs	r1, r6
        EXTI->RTSR1 = tmp;
 80017ce:	4e0c      	ldr	r6, [pc, #48]	; (8001800 <HAL_GPIO_Init+0x208>)
 80017d0:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 80017d2:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d4:	0292      	lsls	r2, r2, #10
 80017d6:	d596      	bpl.n	8001706 <HAL_GPIO_Init+0x10e>
          tmp |= iocurrent;
 80017d8:	4662      	mov	r2, ip
 80017da:	430a      	orrs	r2, r1
 80017dc:	0011      	movs	r1, r2
 80017de:	e793      	b.n	8001708 <HAL_GPIO_Init+0x110>
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017e0:	2703      	movs	r7, #3
 80017e2:	40b7      	lsls	r7, r6
 80017e4:	433c      	orrs	r4, r7
 80017e6:	e771      	b.n	80016cc <HAL_GPIO_Init+0xd4>
 80017e8:	2701      	movs	r7, #1
 80017ea:	40b7      	lsls	r7, r6
 80017ec:	433c      	orrs	r4, r7
 80017ee:	e76d      	b.n	80016cc <HAL_GPIO_Init+0xd4>
 80017f0:	2702      	movs	r7, #2
 80017f2:	40b7      	lsls	r7, r6
 80017f4:	433c      	orrs	r4, r7
 80017f6:	e769      	b.n	80016cc <HAL_GPIO_Init+0xd4>
 80017f8:	2704      	movs	r7, #4
 80017fa:	40b7      	lsls	r7, r6
 80017fc:	433c      	orrs	r4, r7
 80017fe:	e765      	b.n	80016cc <HAL_GPIO_Init+0xd4>
 8001800:	40021800 	.word	0x40021800
 8001804:	50000400 	.word	0x50000400
 8001808:	50000800 	.word	0x50000800
 800180c:	50000c00 	.word	0x50000c00
 8001810:	50001400 	.word	0x50001400

08001814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x8>
 800181a:	e0c9      	b.n	80019b0 <HAL_RCC_OscConfig+0x19c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	07da      	lsls	r2, r3, #31
 8001820:	d52c      	bpl.n	800187c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	4da3      	ldr	r5, [pc, #652]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 8001826:	68a9      	ldr	r1, [r5, #8]
 8001828:	400a      	ands	r2, r1

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800182a:	2a08      	cmp	r2, #8
 800182c:	d100      	bne.n	8001830 <HAL_RCC_OscConfig+0x1c>
 800182e:	e101      	b.n	8001a34 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	6843      	ldr	r3, [r0, #4]
 8001834:	0252      	lsls	r2, r2, #9
 8001836:	4293      	cmp	r3, r2
 8001838:	d100      	bne.n	800183c <HAL_RCC_OscConfig+0x28>
 800183a:	e0bb      	b.n	80019b4 <HAL_RCC_OscConfig+0x1a0>
 800183c:	21a0      	movs	r1, #160	; 0xa0
 800183e:	02c9      	lsls	r1, r1, #11
 8001840:	428b      	cmp	r3, r1
 8001842:	d100      	bne.n	8001846 <HAL_RCC_OscConfig+0x32>
 8001844:	e125      	b.n	8001a92 <HAL_RCC_OscConfig+0x27e>
 8001846:	682a      	ldr	r2, [r5, #0]
 8001848:	499b      	ldr	r1, [pc, #620]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800184a:	400a      	ands	r2, r1
 800184c:	602a      	str	r2, [r5, #0]
 800184e:	682a      	ldr	r2, [r5, #0]
 8001850:	499a      	ldr	r1, [pc, #616]	; (8001abc <HAL_RCC_OscConfig+0x2a8>)
 8001852:	400a      	ands	r2, r1
 8001854:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001856:	2b00      	cmp	r3, #0
 8001858:	d000      	beq.n	800185c <HAL_RCC_OscConfig+0x48>
 800185a:	e0ae      	b.n	80019ba <HAL_RCC_OscConfig+0x1a6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fb2e 	bl	8000ebc <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001860:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001862:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001864:	02bf      	lsls	r7, r7, #10
 8001866:	e005      	b.n	8001874 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb28 	bl	8000ebc <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	2864      	cmp	r0, #100	; 0x64
 8001870:	d900      	bls.n	8001874 <HAL_RCC_OscConfig+0x60>
 8001872:	e0dd      	b.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	423b      	tst	r3, r7
 8001878:	d1f6      	bne.n	8001868 <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	079a      	lsls	r2, r3, #30
 800187e:	d52b      	bpl.n	80018d8 <HAL_RCC_OscConfig+0xc4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001880:	2238      	movs	r2, #56	; 0x38
 8001882:	4d8c      	ldr	r5, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 8001884:	68ab      	ldr	r3, [r5, #8]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001886:	421a      	tst	r2, r3
 8001888:	d100      	bne.n	800188c <HAL_RCC_OscConfig+0x78>
 800188a:	e06f      	b.n	800196c <HAL_RCC_OscConfig+0x158>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	68e3      	ldr	r3, [r4, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_RCC_OscConfig+0x80>
 8001892:	e0ad      	b.n	80019f0 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800189a:	4013      	ands	r3, r2
 800189c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018a0:	4313      	orrs	r3, r2
 80018a2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	682a      	ldr	r2, [r5, #0]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4313      	orrs	r3, r2
 80018ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb05 	bl	8000ebc <HAL_GetTick>
 80018b2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_OscConfig+0xae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fb01 	bl	8000ebc <HAL_GetTick>
 80018ba:	1b80      	subs	r0, r0, r6
 80018bc:	2802      	cmp	r0, #2
 80018be:	d900      	bls.n	80018c2 <HAL_RCC_OscConfig+0xae>
 80018c0:	e0b6      	b.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	423b      	tst	r3, r7
 80018c6:	d0f6      	beq.n	80018b6 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	686a      	ldr	r2, [r5, #4]
 80018ca:	6963      	ldr	r3, [r4, #20]
 80018cc:	497d      	ldr	r1, [pc, #500]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	400a      	ands	r2, r1
 80018d2:	4313      	orrs	r3, r2
 80018d4:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	071a      	lsls	r2, r3, #28
 80018da:	d42b      	bmi.n	8001934 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	2204      	movs	r2, #4
 80018de:	421a      	tst	r2, r3
 80018e0:	d026      	beq.n	8001930 <HAL_RCC_OscConfig+0x11c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018e2:	2338      	movs	r3, #56	; 0x38
 80018e4:	4d73      	ldr	r5, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 80018e6:	68a9      	ldr	r1, [r5, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d100      	bne.n	80018f0 <HAL_RCC_OscConfig+0xdc>
 80018ee:	e096      	b.n	8001a1e <HAL_RCC_OscConfig+0x20a>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	68a3      	ldr	r3, [r4, #8]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e0b9      	b.n	8001a6c <HAL_RCC_OscConfig+0x258>
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0xea>
 80018fc:	e0d2      	b.n	8001aa4 <HAL_RCC_OscConfig+0x290>
 80018fe:	2001      	movs	r0, #1
 8001900:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001902:	4381      	bics	r1, r0
 8001904:	65e9      	str	r1, [r5, #92]	; 0x5c
 8001906:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001908:	4391      	bics	r1, r2
 800190a:	65e9      	str	r1, [r5, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190c:	2b00      	cmp	r3, #0
 800190e:	d000      	beq.n	8001912 <HAL_RCC_OscConfig+0xfe>
 8001910:	e0af      	b.n	8001a72 <HAL_RCC_OscConfig+0x25e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fad3 	bl	8000ebc <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001916:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8001918:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	4f6b      	ldr	r7, [pc, #428]	; (8001ac8 <HAL_RCC_OscConfig+0x2b4>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800191c:	e005      	b.n	800192a <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff facd 	bl	8000ebc <HAL_GetTick>
 8001922:	1b00      	subs	r0, r0, r4
 8001924:	42b8      	cmp	r0, r7
 8001926:	d900      	bls.n	800192a <HAL_RCC_OscConfig+0x116>
 8001928:	e082      	b.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800192a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800192c:	421e      	tst	r6, r3
 800192e:	d1f6      	bne.n	800191e <HAL_RCC_OscConfig+0x10a>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8001930:	2000      	movs	r0, #0
}
 8001932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001934:	2238      	movs	r2, #56	; 0x38
 8001936:	4d5f      	ldr	r5, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 8001938:	68a9      	ldr	r1, [r5, #8]
 800193a:	400a      	ands	r2, r1
 800193c:	2a18      	cmp	r2, #24
 800193e:	d04d      	beq.n	80019dc <HAL_RCC_OscConfig+0x1c8>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	69a3      	ldr	r3, [r4, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d07f      	beq.n	8001a46 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_LSI_ENABLE();
 8001946:	2201      	movs	r2, #1
 8001948:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800194a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800194c:	4313      	orrs	r3, r2
 800194e:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001950:	f7ff fab4 	bl	8000ebc <HAL_GetTick>
 8001954:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001956:	e004      	b.n	8001962 <HAL_RCC_OscConfig+0x14e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fab0 	bl	8000ebc <HAL_GetTick>
 800195c:	1b80      	subs	r0, r0, r6
 800195e:	2802      	cmp	r0, #2
 8001960:	d866      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001962:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001964:	421f      	tst	r7, r3
 8001966:	d0f7      	beq.n	8001958 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	e7b7      	b.n	80018dc <HAL_RCC_OscConfig+0xc8>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	055b      	lsls	r3, r3, #21
 8001970:	d502      	bpl.n	8001978 <HAL_RCC_OscConfig+0x164>
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01b      	beq.n	80019b0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 800197a:	6962      	ldr	r2, [r4, #20]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	4851      	ldr	r0, [pc, #324]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 8001980:	0212      	lsls	r2, r2, #8
 8001982:	4001      	ands	r1, r0
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	400a      	ands	r2, r1
 800198e:	6921      	ldr	r1, [r4, #16]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_RCC_OscConfig+0x2b8>)
 8001998:	049b      	lsls	r3, r3, #18
 800199a:	0f5b      	lsrs	r3, r3, #29
 800199c:	40da      	lsrs	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <HAL_RCC_OscConfig+0x2bc>)
 80019a2:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_OscConfig+0x2c0>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	f7ff fa4a 	bl	8000e40 <HAL_InitTick>
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d031      	beq.n	8001a14 <HAL_RCC_OscConfig+0x200>
    return HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
 80019b2:	e7be      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	682a      	ldr	r2, [r5, #0]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa7f 	bl	8000ebc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80019c0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	4f3c      	ldr	r7, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 80019c4:	02b6      	lsls	r6, r6, #10
 80019c6:	e004      	b.n	80019d2 <HAL_RCC_OscConfig+0x1be>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa78 	bl	8000ebc <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	2864      	cmp	r0, #100	; 0x64
 80019d0:	d82e      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4233      	tst	r3, r6
 80019d6:	d0f7      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1b4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	e74f      	b.n	800187c <HAL_RCC_OscConfig+0x68>
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019dc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80019de:	0792      	lsls	r2, r2, #30
 80019e0:	d400      	bmi.n	80019e4 <HAL_RCC_OscConfig+0x1d0>
 80019e2:	e77b      	b.n	80018dc <HAL_RCC_OscConfig+0xc8>
 80019e4:	69a2      	ldr	r2, [r4, #24]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d000      	beq.n	80019ec <HAL_RCC_OscConfig+0x1d8>
 80019ea:	e777      	b.n	80018dc <HAL_RCC_OscConfig+0xc8>
    return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e7a0      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	4a39      	ldr	r2, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x2c4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4013      	ands	r3, r2
 80019f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa5f 	bl	8000ebc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fe:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8001a00:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a02:	e004      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fa5a 	bl	8000ebc <HAL_GetTick>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d810      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	423b      	tst	r3, r7
 8001a12:	d1f7      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1f0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	071a      	lsls	r2, r3, #28
 8001a18:	d400      	bmi.n	8001a1c <HAL_RCC_OscConfig+0x208>
 8001a1a:	e75f      	b.n	80018dc <HAL_RCC_OscConfig+0xc8>
 8001a1c:	e78a      	b.n	8001934 <HAL_RCC_OscConfig+0x120>
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a1e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001a20:	079b      	lsls	r3, r3, #30
 8001a22:	d400      	bmi.n	8001a26 <HAL_RCC_OscConfig+0x212>
 8001a24:	e784      	b.n	8001930 <HAL_RCC_OscConfig+0x11c>
 8001a26:	68a0      	ldr	r0, [r4, #8]
 8001a28:	4243      	negs	r3, r0
 8001a2a:	4158      	adcs	r0, r3
    return HAL_ERROR;
 8001a2c:	b2c0      	uxtb	r0, r0
 8001a2e:	e780      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
 8001a32:	e77e      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	682a      	ldr	r2, [r5, #0]
 8001a36:	0392      	lsls	r2, r2, #14
 8001a38:	d400      	bmi.n	8001a3c <HAL_RCC_OscConfig+0x228>
 8001a3a:	e71f      	b.n	800187c <HAL_RCC_OscConfig+0x68>
 8001a3c:	6842      	ldr	r2, [r0, #4]
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d000      	beq.n	8001a44 <HAL_RCC_OscConfig+0x230>
 8001a42:	e71b      	b.n	800187c <HAL_RCC_OscConfig+0x68>
 8001a44:	e7b4      	b.n	80019b0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_LSI_DISABLE();
 8001a46:	2201      	movs	r2, #1
 8001a48:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a4a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001a50:	f7ff fa34 	bl	8000ebc <HAL_GetTick>
 8001a54:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a56:	e004      	b.n	8001a62 <HAL_RCC_OscConfig+0x24e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fa30 	bl	8000ebc <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d8e6      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a62:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001a64:	421f      	tst	r7, r3
 8001a66:	d1f7      	bne.n	8001a58 <HAL_RCC_OscConfig+0x244>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	e737      	b.n	80018dc <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa23 	bl	8000ebc <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a76:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 8001a78:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a7a:	4e0e      	ldr	r6, [pc, #56]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	4f12      	ldr	r7, [pc, #72]	; (8001ac8 <HAL_RCC_OscConfig+0x2b4>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a7e:	e004      	b.n	8001a8a <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff fa1c 	bl	8000ebc <HAL_GetTick>
 8001a84:	1b00      	subs	r0, r0, r4
 8001a86:	42b8      	cmp	r0, r7
 8001a88:	d8d2      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a8a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001a8c:	421d      	tst	r5, r3
 8001a8e:	d0f7      	beq.n	8001a80 <HAL_RCC_OscConfig+0x26c>
 8001a90:	e74e      	b.n	8001930 <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	6829      	ldr	r1, [r5, #0]
 8001a96:	02db      	lsls	r3, r3, #11
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	602b      	str	r3, [r5, #0]
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa2:	e78a      	b.n	80019ba <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001aaa:	2201      	movs	r2, #1
 8001aac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	65eb      	str	r3, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	e7de      	b.n	8001a72 <HAL_RCC_OscConfig+0x25e>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	fffeffff 	.word	0xfffeffff
 8001abc:	fffbffff 	.word	0xfffbffff
 8001ac0:	ffffc7ff 	.word	0xffffc7ff
 8001ac4:	ffff80ff 	.word	0xffff80ff
 8001ac8:	00001388 	.word	0x00001388
 8001acc:	02dc6c00 	.word	0x02dc6c00
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	fffffeff 	.word	0xfffffeff

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	46ce      	mov	lr, r9
 8001ae0:	4647      	mov	r7, r8
 8001ae2:	0005      	movs	r5, r0
 8001ae4:	000c      	movs	r4, r1
 8001ae6:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_ClockConfig+0x12>
 8001aec:	e080      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aee:	2207      	movs	r2, #7
 8001af0:	4e65      	ldr	r6, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1ac>)
 8001af2:	6833      	ldr	r3, [r6, #0]
 8001af4:	4013      	ands	r3, r2
 8001af6:	428b      	cmp	r3, r1
 8001af8:	d200      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x20>
 8001afa:	e07e      	b.n	8001bfa <HAL_RCC_ClockConfig+0x11e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	079a      	lsls	r2, r3, #30
 8001b00:	d510      	bpl.n	8001b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	075a      	lsls	r2, r3, #29
 8001b04:	d507      	bpl.n	8001b16 <HAL_RCC_ClockConfig+0x3a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b06:	4861      	ldr	r0, [pc, #388]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001b08:	4961      	ldr	r1, [pc, #388]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	6882      	ldr	r2, [r0, #8]
 8001b0c:	4011      	ands	r1, r2
 8001b0e:	22b0      	movs	r2, #176	; 0xb0
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	430a      	orrs	r2, r1
 8001b14:	6082      	str	r2, [r0, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b16:	495d      	ldr	r1, [pc, #372]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001b18:	485e      	ldr	r0, [pc, #376]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	688a      	ldr	r2, [r1, #8]
 8001b1c:	4002      	ands	r2, r0
 8001b1e:	68e8      	ldr	r0, [r5, #12]
 8001b20:	4302      	orrs	r2, r0
 8001b22:	608a      	str	r2, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b24:	07db      	lsls	r3, r3, #31
 8001b26:	d529      	bpl.n	8001b7c <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001b28:	211c      	movs	r1, #28
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	438b      	bics	r3, r1
 8001b30:	68a9      	ldr	r1, [r5, #8]
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6013      	str	r3, [r2, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	6869      	ldr	r1, [r5, #4]
 8001b38:	2901      	cmp	r1, #1
 8001b3a:	d056      	beq.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_ERROR;
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	d000      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x66>
 8001b40:	e079      	b.n	8001c36 <HAL_RCC_ClockConfig+0x15a>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	055b      	lsls	r3, r3, #21
 8001b46:	d553      	bpl.n	8001bf0 <HAL_RCC_ClockConfig+0x114>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4e50      	ldr	r6, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001b4c:	68b3      	ldr	r3, [r6, #8]
 8001b4e:	4393      	bics	r3, r2
 8001b50:	430b      	orrs	r3, r1
 8001b52:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7ff f9b2 	bl	8000ebc <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	2338      	movs	r3, #56	; 0x38
 8001b5a:	4698      	mov	r8, r3
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 8001b5e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e004      	b.n	8001b6e <HAL_RCC_ClockConfig+0x92>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f9aa 	bl	8000ebc <HAL_GetTick>
 8001b68:	1bc0      	subs	r0, r0, r7
 8001b6a:	4548      	cmp	r0, r9
 8001b6c:	d85b      	bhi.n	8001c26 <HAL_RCC_ClockConfig+0x14a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4643      	mov	r3, r8
 8001b70:	68b2      	ldr	r2, [r6, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	686b      	ldr	r3, [r5, #4]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1f3      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x88>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4e42      	ldr	r6, [pc, #264]	; (8001c88 <HAL_RCC_ClockConfig+0x1ac>)
 8001b80:	6833      	ldr	r3, [r6, #0]
 8001b82:	4013      	ands	r3, r2
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	d85d      	bhi.n	8001c44 <HAL_RCC_ClockConfig+0x168>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	075b      	lsls	r3, r3, #29
 8001b8c:	d506      	bpl.n	8001b9c <HAL_RCC_ClockConfig+0xc0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	4942      	ldr	r1, [pc, #264]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b92:	6893      	ldr	r3, [r2, #8]
 8001b94:	400b      	ands	r3, r1
 8001b96:	6929      	ldr	r1, [r5, #16]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9c:	2338      	movs	r3, #56	; 0x38
 8001b9e:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	6891      	ldr	r1, [r2, #8]
 8001ba2:	420b      	tst	r3, r1
 8001ba4:	d041      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x14e>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ba6:	6891      	ldr	r1, [r2, #8]
 8001ba8:	4019      	ands	r1, r3
 8001baa:	2908      	cmp	r1, #8
 8001bac:	d062      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x198>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bae:	6891      	ldr	r1, [r2, #8]
 8001bb0:	4019      	ands	r1, r3
 8001bb2:	2920      	cmp	r1, #32
 8001bb4:	d065      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x1a6>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001bb6:	6892      	ldr	r2, [r2, #8]
 8001bb8:	4013      	ands	r3, r2
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
  }
  else
  {
    sysclockfreq = 0U;
 8001bba:	3b18      	subs	r3, #24
 8001bbc:	425a      	negs	r2, r3
 8001bbe:	4153      	adcs	r3, r2
 8001bc0:	22fa      	movs	r2, #250	; 0xfa
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	01d2      	lsls	r2, r2, #7
 8001bc6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_RCC_ClockConfig+0x1b0>)
 8001bca:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6892      	ldr	r2, [r2, #8]
 8001bce:	0512      	lsls	r2, r2, #20
 8001bd0:	0f12      	lsrs	r2, r2, #28
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	5852      	ldr	r2, [r2, r1]
 8001bd6:	211f      	movs	r1, #31
 8001bd8:	400a      	ands	r2, r1
 8001bda:	40d3      	lsrs	r3, r2
 8001bdc:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	f7ff f92c 	bl	8000e40 <HAL_InitTick>
 8001be8:	e003      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x116>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	6813      	ldr	r3, [r2, #0]
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	d4ab      	bmi.n	8001b48 <HAL_RCC_ClockConfig+0x6c>
    return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
}
 8001bf2:	bcc0      	pop	{r6, r7}
 8001bf4:	46b9      	mov	r9, r7
 8001bf6:	46b0      	mov	r8, r6
 8001bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	6833      	ldr	r3, [r6, #0]
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c02:	f7ff f95b 	bl	8000ebc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c06:	2307      	movs	r3, #7
 8001c08:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 8001c0c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c10:	4642      	mov	r2, r8
 8001c12:	6833      	ldr	r3, [r6, #0]
 8001c14:	4013      	ands	r3, r2
 8001c16:	42a3      	cmp	r3, r4
 8001c18:	d100      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x140>
 8001c1a:	e76f      	b.n	8001afc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f94e 	bl	8000ebc <HAL_GetTick>
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	4548      	cmp	r0, r9
 8001c24:	d9f4      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x134>
        return HAL_TIMEOUT;
 8001c26:	2003      	movs	r0, #3
 8001c28:	e7e3      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x116>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2a:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_RCC_ClockConfig+0x1d0>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2e:	0492      	lsls	r2, r2, #18
 8001c30:	0f52      	lsrs	r2, r2, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c32:	40d3      	lsrs	r3, r2
 8001c34:	e7c8      	b.n	8001bc8 <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c36:	2903      	cmp	r1, #3
 8001c38:	d01e      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x19c>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c3a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001c3c:	079b      	lsls	r3, r3, #30
 8001c3e:	d500      	bpl.n	8001c42 <HAL_RCC_ClockConfig+0x166>
 8001c40:	e782      	b.n	8001b48 <HAL_RCC_ClockConfig+0x6c>
 8001c42:	e7d5      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	6833      	ldr	r3, [r6, #0]
 8001c46:	4393      	bics	r3, r2
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f936 	bl	8000ebc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c50:	2307      	movs	r3, #7
 8001c52:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
    tickstart = HAL_GetTick();
 8001c56:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c5a:	4642      	mov	r2, r8
 8001c5c:	6833      	ldr	r3, [r6, #0]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	42a3      	cmp	r3, r4
 8001c62:	d100      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x18a>
 8001c64:	e790      	b.n	8001b88 <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7ff f929 	bl	8000ebc <HAL_GetTick>
 8001c6a:	1bc0      	subs	r0, r0, r7
 8001c6c:	4548      	cmp	r0, r9
 8001c6e:	d9f4      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x17e>
        return HAL_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	e7be      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x116>
    sysclockfreq = HSE_VALUE;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_ClockConfig+0x1d0>)
 8001c76:	e7a7      	b.n	8001bc8 <HAL_RCC_ClockConfig+0xec>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c78:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001c7a:	079b      	lsls	r3, r3, #30
 8001c7c:	d500      	bpl.n	8001c80 <HAL_RCC_ClockConfig+0x1a4>
 8001c7e:	e763      	b.n	8001b48 <HAL_RCC_ClockConfig+0x6c>
 8001c80:	e7b6      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x114>
    sysclockfreq = LSE_VALUE;
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	e79f      	b.n	8001bc8 <HAL_RCC_ClockConfig+0xec>
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	ffff84ff 	.word	0xffff84ff
 8001c94:	fffff0ff 	.word	0xfffff0ff
 8001c98:	00001388 	.word	0x00001388
 8001c9c:	ffff8fff 	.word	0xffff8fff
 8001ca0:	08001f90 	.word	0x08001f90
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	02dc6c00 	.word	0x02dc6c00

08001cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46ce      	mov	lr, r9
 8001cb4:	4647      	mov	r7, r8
 8001cb6:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cb8:	6803      	ldr	r3, [r0, #0]
{
 8001cba:	0004      	movs	r4, r0
 8001cbc:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cbe:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc0:	039a      	lsls	r2, r3, #14
 8001cc2:	d51a      	bpl.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc4:	2180      	movs	r1, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	2500      	movs	r5, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc8:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cca:	0549      	lsls	r1, r1, #21
 8001ccc:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	46a8      	mov	r8, r5
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd0:	4208      	tst	r0, r1
 8001cd2:	d044      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xae>
      pwrclkchanged = SET;
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001cd4:	4d42      	ldr	r5, [pc, #264]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	22c0      	movs	r2, #192	; 0xc0
 8001cd8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	0001      	movs	r1, r0
 8001cde:	4011      	ands	r1, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ce0:	4210      	tst	r0, r2
 8001ce2:	d14d      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce4:	69a1      	ldr	r1, [r4, #24]
 8001ce6:	483e      	ldr	r0, [pc, #248]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce8:	4d3e      	ldr	r5, [pc, #248]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001cec:	402a      	ands	r2, r5
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	65c2      	str	r2, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	2a01      	cmp	r2, #1
 8001cf8:	d066      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cfa:	07da      	lsls	r2, r3, #31
 8001cfc:	d506      	bpl.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cfe:	2503      	movs	r5, #3
 8001d00:	4937      	ldr	r1, [pc, #220]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d02:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001d04:	43aa      	bics	r2, r5
 8001d06:	68a5      	ldr	r5, [r4, #8]
 8001d08:	432a      	orrs	r2, r5
 8001d0a:	654a      	str	r2, [r1, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d0c:	065a      	lsls	r2, r3, #25
 8001d0e:	d506      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d10:	4933      	ldr	r1, [pc, #204]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d12:	4d35      	ldr	r5, [pc, #212]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001d14:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001d16:	402a      	ands	r2, r5
 8001d18:	68e5      	ldr	r5, [r4, #12]
 8001d1a:	432a      	orrs	r2, r5
 8001d1c:	654a      	str	r2, [r1, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d1e:	045a      	lsls	r2, r3, #17
 8001d20:	d506      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d22:	492f      	ldr	r1, [pc, #188]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d24:	6965      	ldr	r5, [r4, #20]
 8001d26:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	0892      	lsrs	r2, r2, #2
 8001d2c:	432a      	orrs	r2, r5
 8001d2e:	654a      	str	r2, [r1, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d30:	051a      	lsls	r2, r3, #20
 8001d32:	d506      	bpl.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d34:	492a      	ldr	r1, [pc, #168]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d36:	4d2d      	ldr	r5, [pc, #180]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d38:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001d3a:	402a      	ands	r2, r5
 8001d3c:	6925      	ldr	r5, [r4, #16]
 8001d3e:	432a      	orrs	r2, r5
 8001d40:	654a      	str	r2, [r1, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da06      	bge.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001d46:	21e0      	movs	r1, #224	; 0xe0
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	438b      	bics	r3, r1
 8001d4e:	6861      	ldr	r1, [r4, #4]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001d54:	b003      	add	sp, #12
 8001d56:	bcc0      	pop	{r6, r7}
 8001d58:	46b9      	mov	r9, r7
 8001d5a:	46b0      	mov	r8, r6
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001d60:	4d1f      	ldr	r5, [pc, #124]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4308      	orrs	r0, r1
 8001d64:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001d66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d68:	4011      	ands	r1, r2
 8001d6a:	9101      	str	r1, [sp, #4]
 8001d6c:	9a01      	ldr	r2, [sp, #4]
      pwrclkchanged = SET;
 8001d6e:	2201      	movs	r2, #1
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001d70:	6de8      	ldr	r0, [r5, #92]	; 0x5c
      pwrclkchanged = SET;
 8001d72:	4690      	mov	r8, r2
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001d74:	22c0      	movs	r2, #192	; 0xc0
 8001d76:	0001      	movs	r1, r0
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	4011      	ands	r1, r2
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d7c:	4210      	tst	r0, r2
 8001d7e:	d0b1      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001d80:	69a0      	ldr	r0, [r4, #24]
 8001d82:	4288      	cmp	r0, r1
 8001d84:	d0af      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d86:	2180      	movs	r1, #128	; 0x80
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001d88:	6dee      	ldr	r6, [r5, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8a:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8001d8c:	0249      	lsls	r1, r1, #9
 8001d8e:	4339      	orrs	r1, r7
 8001d90:	65e9      	str	r1, [r5, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d92:	6de9      	ldr	r1, [r5, #92]	; 0x5c
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d96:	4f16      	ldr	r7, [pc, #88]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001d98:	4032      	ands	r2, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9a:	4039      	ands	r1, r7
 8001d9c:	65e9      	str	r1, [r5, #92]	; 0x5c
      RCC->CSR1 = tmpregister;
 8001d9e:	65ea      	str	r2, [r5, #92]	; 0x5c
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001da0:	07f2      	lsls	r2, r6, #31
 8001da2:	d51a      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      tickstart = HAL_GetTick();
 8001da4:	f7ff f88a 	bl	8000ebc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
      tickstart = HAL_GetTick();
 8001daa:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dac:	2702      	movs	r7, #2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	4699      	mov	r9, r3
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001db0:	e004      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f883 	bl	8000ebc <HAL_GetTick>
 8001db6:	1b80      	subs	r0, r0, r6
 8001db8:	4548      	cmp	r0, r9
 8001dba:	d80b      	bhi.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dbc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001dbe:	421f      	tst	r7, r3
 8001dc0:	d0f7      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc2:	69a1      	ldr	r1, [r4, #24]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	e78e      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4905      	ldr	r1, [pc, #20]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dca:	4d0b      	ldr	r5, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001dcc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001dce:	402a      	ands	r2, r5
 8001dd0:	63ca      	str	r2, [r1, #60]	; 0x3c
 8001dd2:	e792      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
          ret = HAL_TIMEOUT;
 8001dd4:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	e78c      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dda:	0001      	movs	r1, r0
 8001ddc:	e783      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	fffffcff 	.word	0xfffffcff
 8001de8:	ffffcfff 	.word	0xffffcfff
 8001dec:	ffff3fff 	.word	0xffff3fff
 8001df0:	fffeffff 	.word	0xfffeffff
 8001df4:	00001388 	.word	0x00001388
 8001df8:	efffffff 	.word	0xefffffff

08001dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	d05f      	beq.n	8001ec2 <HAL_TIM_Base_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	233d      	movs	r3, #61	; 0x3d
 8001e04:	5cc3      	ldrb	r3, [r0, r3]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d04c      	beq.n	8001ea6 <HAL_TIM_Base_Init+0xaa>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	233d      	movs	r3, #61	; 0x3d
 8001e0e:	2202      	movs	r2, #2
 8001e10:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e12:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e14:	492c      	ldr	r1, [pc, #176]	; (8001ec8 <HAL_TIM_Base_Init+0xcc>)
  tmpcr1 = TIMx->CR1;
 8001e16:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	428a      	cmp	r2, r1
 8001e1a:	d015      	beq.n	8001e48 <HAL_TIM_Base_Init+0x4c>
 8001e1c:	492b      	ldr	r1, [pc, #172]	; (8001ecc <HAL_TIM_Base_Init+0xd0>)
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d046      	beq.n	8001eb0 <HAL_TIM_Base_Init+0xb4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_TIM_Base_Init+0xd4>)
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d047      	beq.n	8001eb8 <HAL_TIM_Base_Init+0xbc>
 8001e28:	492a      	ldr	r1, [pc, #168]	; (8001ed4 <HAL_TIM_Base_Init+0xd8>)
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	d010      	beq.n	8001e50 <HAL_TIM_Base_Init+0x54>
 8001e2e:	492a      	ldr	r1, [pc, #168]	; (8001ed8 <HAL_TIM_Base_Init+0xdc>)
 8001e30:	428a      	cmp	r2, r1
 8001e32:	d00d      	beq.n	8001e50 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	438b      	bics	r3, r1
 8001e38:	69a1      	ldr	r1, [r4, #24]
 8001e3a:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3e:	68e3      	ldr	r3, [r4, #12]
 8001e40:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e46:	e012      	b.n	8001e6e <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e48:	2170      	movs	r1, #112	; 0x70
 8001e4a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001e4c:	68a1      	ldr	r1, [r4, #8]
 8001e4e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e50:	4922      	ldr	r1, [pc, #136]	; (8001edc <HAL_TIM_Base_Init+0xe0>)
 8001e52:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e54:	6921      	ldr	r1, [r4, #16]
 8001e56:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	438b      	bics	r3, r1
 8001e5c:	69a1      	ldr	r1, [r4, #24]
 8001e5e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001e60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e62:	68e3      	ldr	r3, [r4, #12]
 8001e64:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e66:	6863      	ldr	r3, [r4, #4]
 8001e68:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e6a:	6963      	ldr	r3, [r4, #20]
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e72:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e76:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	3a0a      	subs	r2, #10
 8001e7a:	54a3      	strb	r3, [r4, r2]
 8001e7c:	3201      	adds	r2, #1
 8001e7e:	54a3      	strb	r3, [r4, r2]
 8001e80:	3201      	adds	r2, #1
 8001e82:	54a3      	strb	r3, [r4, r2]
 8001e84:	3201      	adds	r2, #1
 8001e86:	54a3      	strb	r3, [r4, r2]
 8001e88:	3201      	adds	r2, #1
 8001e8a:	54a3      	strb	r3, [r4, r2]
 8001e8c:	3201      	adds	r2, #1
 8001e8e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	3201      	adds	r2, #1
 8001e92:	54a3      	strb	r3, [r4, r2]
 8001e94:	3201      	adds	r2, #1
 8001e96:	54a3      	strb	r3, [r4, r2]
 8001e98:	3201      	adds	r2, #1
 8001e9a:	54a3      	strb	r3, [r4, r2]
 8001e9c:	3201      	adds	r2, #1
 8001e9e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	3a0a      	subs	r2, #10
 8001ea2:	54a3      	strb	r3, [r4, r2]
}
 8001ea4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	333c      	adds	r3, #60	; 0x3c
 8001ea8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001eaa:	f7fe ff61 	bl	8000d70 <HAL_TIM_Base_MspInit>
 8001eae:	e7ad      	b.n	8001e0c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb0:	2170      	movs	r1, #112	; 0x70
 8001eb2:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001eb4:	68a1      	ldr	r1, [r4, #8]
 8001eb6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb8:	4908      	ldr	r1, [pc, #32]	; (8001edc <HAL_TIM_Base_Init+0xe0>)
 8001eba:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ebc:	6921      	ldr	r1, [r4, #16]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	e7b8      	b.n	8001e34 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e7ee      	b.n	8001ea4 <HAL_TIM_Base_Init+0xa8>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40002000 	.word	0x40002000
 8001ed4:	40014400 	.word	0x40014400
 8001ed8:	40014800 	.word	0x40014800
 8001edc:	fffffcff 	.word	0xfffffcff

08001ee0 <__libc_init_array>:
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	2600      	movs	r6, #0
 8001ee4:	4d0c      	ldr	r5, [pc, #48]	; (8001f18 <__libc_init_array+0x38>)
 8001ee6:	4c0d      	ldr	r4, [pc, #52]	; (8001f1c <__libc_init_array+0x3c>)
 8001ee8:	1b64      	subs	r4, r4, r5
 8001eea:	10a4      	asrs	r4, r4, #2
 8001eec:	42a6      	cmp	r6, r4
 8001eee:	d109      	bne.n	8001f04 <__libc_init_array+0x24>
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	f000 f821 	bl	8001f38 <_init>
 8001ef6:	4d0a      	ldr	r5, [pc, #40]	; (8001f20 <__libc_init_array+0x40>)
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <__libc_init_array+0x44>)
 8001efa:	1b64      	subs	r4, r4, r5
 8001efc:	10a4      	asrs	r4, r4, #2
 8001efe:	42a6      	cmp	r6, r4
 8001f00:	d105      	bne.n	8001f0e <__libc_init_array+0x2e>
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	00b3      	lsls	r3, r6, #2
 8001f06:	58eb      	ldr	r3, [r5, r3]
 8001f08:	4798      	blx	r3
 8001f0a:	3601      	adds	r6, #1
 8001f0c:	e7ee      	b.n	8001eec <__libc_init_array+0xc>
 8001f0e:	00b3      	lsls	r3, r6, #2
 8001f10:	58eb      	ldr	r3, [r5, r3]
 8001f12:	4798      	blx	r3
 8001f14:	3601      	adds	r6, #1
 8001f16:	e7f2      	b.n	8001efe <__libc_init_array+0x1e>
 8001f18:	08001fd0 	.word	0x08001fd0
 8001f1c:	08001fd0 	.word	0x08001fd0
 8001f20:	08001fd0 	.word	0x08001fd0
 8001f24:	08001fd4 	.word	0x08001fd4

08001f28 <memset>:
 8001f28:	0003      	movs	r3, r0
 8001f2a:	1882      	adds	r2, r0, r2
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memset+0xa>
 8001f30:	4770      	bx	lr
 8001f32:	7019      	strb	r1, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	e7f9      	b.n	8001f2c <memset+0x4>

08001f38 <_init>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3e:	bc08      	pop	{r3}
 8001f40:	469e      	mov	lr, r3
 8001f42:	4770      	bx	lr

08001f44 <_fini>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr
